Terminals unused in grammar

    NEW_LINE
    OTHER
    ST_LBR
    ST_RBR
    ST_SEMICOLON


Rules useless in parser due to conflicts

   72 $@24: %empty

   74 $@25: %empty


State 3 conflicts: 1 shift/reduce
State 136 conflicts: 9 shift/reduce, 1 reduce/reduce
State 168 conflicts: 10 shift/reduce, 1 reduce/reduce
State 172 conflicts: 1 shift/reduce
State 173 conflicts: 1 shift/reduce
State 183 conflicts: 10 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: start $end

    1 $@1: %empty

    2 start: start $@1 global_declare program
    3      | %empty

    4 program: functions main

    5 global_declare: stmt_declare
    6               | %empty

    7 functions: functions function
    8          | %empty

    9 $@2: %empty

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   11 $@3: %empty

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   13 $@4: %empty

   14 $@5: %empty

   15 $@6: %empty

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

   17 $@7: %empty

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   19 $@8: %empty

   20 stmts: stmt $@8 stmts
   21      | %empty

   22 stmt: stmt_declare
   23     | stmt_assignment
   24     | KW_BREAK ST_DOLLAR
   25     | KW_CONTINUE ST_DOLLAR
   26     | stmt_if
   27     | stmt_return
   28     | stmt_while
   29     | stmt_call_function
   30     | stmt_for

   31 $@9: %empty

   32 stmt: $@9 ST_DOLLAR

   33 type: KW_INT
   34     | KW_CHAR

   35 stmt_declare: type IDENTIFIER ids

   36 ids: ST_DOLLAR
   37    | ST_COMMA IDENTIFIER ids
   38    | OP_ASSIGN expression ids

   39 $@10: %empty

   40 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@10 ST_RPAR

   41 fun_arguments: fun_args_part1
   42              | %empty

   43 $@11: %empty

   44 fun_args_part1: expression $@11 fun_args_part2

   45 fun_args_part2: ST_COMMA fun_args_part1
   46               | %empty

   47 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR

   48 stmt_return: KW_RETURN expression ST_DOLLAR

   49 $@12: %empty

   50 $@13: %empty

   51 $@14: %empty

   52 $@15: %empty

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

   54 $@16: %empty

   55 $@17: %empty

   56 $@18: %empty

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif
   58       | else

   59 $@19: %empty

   60 else: KW_ELSE ST_LCURL $@19 stmts ST_RCURL
   61     | %empty

   62 $@20: %empty

   63 $@21: %empty

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL

   65 stmt_for_assign_declare: stmt_assignment
   66                        | stmt_declare

   67 stmt_for_step: IDENTIFIER OP_ASSIGN expression ST_DOLLAR

   68 $@22: %empty

   69 $@23: %empty

   70 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

   71 loop_stmts: loop_stmts stmts

   72 $@24: %empty

   73 loop_stmts: loop_stmts KW_BREAK $@24 ST_DOLLAR

   74 $@25: %empty

   75 loop_stmts: loop_stmts KW_CONTINUE $@25 ST_DOLLAR
   76           | %empty

   77 expression: expression OP_PLUS expression
   78           | expression OP_MINUS expression
   79           | expression OP_MULTIPLY expression
   80           | expression OP_DIVIDE expression
   81           | expression OP_LESS expression
   82           | expression OP_LESS_EQUAL expression
   83           | expression OP_EQUAL expression
   84           | expression OP_NOT_EQUAL expression
   85           | expression OP_GREATER expression
   86           | expression OP_GREATER_EQUAL expression
   87           | expression OP_LOGICAL_OR expression
   88           | expression OP_LOGICAL_AND expression
   89           | expression OP_BITWISE_OR expression
   90           | expression OP_BITWISE_AND expression
   91           | expression OP_BITWISE_XOR expression
   92           | OP_LOGICAL_NOT expression
   93           | OP_MINUS expression
   94           | ST_LPAR expression ST_RPAR
   95           | IDENTIFIER
   96           | NUMBER
   97           | NCHAR
   98           | UCHAR
   99           | LCHAR
  100           | stmt_call_function

  101 arguments: args_part1
  102          | %empty

  103 $@26: %empty

  104 args_part1: type IDENTIFIER $@26 args_part2

  105 args_part2: ST_COMMA args_part1
  106           | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_VOID (258) 12 18
    KW_IF (259) 53
    KW_RETURN (260) 48
    KW_INT (261) 10 16 33
    KW_ELSE (262) 60
    KW_MAIN (263) 10 12
    KW_FOR (264) 64
    KW_BREAK (265) 24 73
    KW_CHAR (266) 34
    KW_WHILE (267) 70
    KW_CONTINUE (268) 25 75
    KW_ELSEIF (269) 57
    NEW_LINE (270)
    OTHER (271)
    OP_ASSIGN (272) 38 47 67
    OP_PLUS (273) 77
    OP_MINUS (274) 78 93
    OP_MULTIPLY (275) 79
    OP_DIVIDE (276) 80
    OP_LESS (277) 81
    OP_LESS_EQUAL (278) 82
    OP_EQUAL (279) 83
    OP_NOT_EQUAL (280) 84
    OP_GREATER (281) 85
    OP_GREATER_EQUAL (282) 86
    OP_BITWISE_OR (283) 89
    OP_BITWISE_AND (284) 90
    OP_BITWISE_XOR (285) 91
    OP_LOGICAL_OR (286) 87
    OP_LOGICAL_AND (287) 88
    OP_LOGICAL_NOT (288) 92
    ST_LPAR (289) 10 12 16 18 40 53 57 64 70 94
    ST_RPAR (290) 10 12 16 18 40 53 57 64 70 94
    ST_LCURL (291) 10 12 16 18 53 57 60 64 70
    ST_RCURL (292) 10 12 16 18 53 57 60 64 70
    ST_LBR (293)
    ST_RBR (294)
    ST_DOLLAR (295) 24 25 32 36 47 48 64 67 73 75
    ST_COMMA (296) 37 45 105
    ST_SEMICOLON (297)
    LCHAR <charVal> (298) 99
    UCHAR <charVal> (299) 98
    NCHAR <charVal> (300) 97
    IDENTIFIER <stringVal> (301) 16 18 35 37 40 47 67 95 104
    NUMBER <intVal> (302) 96


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    start (49)
        on left: 2 3
        on right: 0 2
    $@1 (50)
        on left: 1
        on right: 2
    program (51)
        on left: 4
        on right: 2
    global_declare (52)
        on left: 5 6
        on right: 2
    functions (53)
        on left: 7 8
        on right: 4 7
    main (54)
        on left: 10 12
        on right: 4
    $@2 (55)
        on left: 9
        on right: 10
    $@3 (56)
        on left: 11
        on right: 12
    function <intVal> (57)
        on left: 16 18
        on right: 7
    $@4 (58)
        on left: 13
        on right: 16
    $@5 (59)
        on left: 14
        on right: 16
    $@6 (60)
        on left: 15
        on right: 16
    $@7 (61)
        on left: 17
        on right: 18
    stmts (62)
        on left: 20 21
        on right: 10 12 16 18 20 53 57 60 71
    $@8 (63)
        on left: 19
        on right: 20
    stmt (64)
        on left: 22 23 24 25 26 27 28 29 30 32
        on right: 20
    $@9 (65)
        on left: 31
        on right: 32
    type (66)
        on left: 33 34
        on right: 35 104
    stmt_declare (67)
        on left: 35
        on right: 5 22 66
    ids <intVal> (68)
        on left: 36 37 38
        on right: 35 37 38
    stmt_call_function <intVal> (69)
        on left: 40
        on right: 29 100
    $@10 (70)
        on left: 39
        on right: 40
    fun_arguments (71)
        on left: 41 42
        on right: 40
    fun_args_part1 (72)
        on left: 44
        on right: 41 45
    $@11 (73)
        on left: 43
        on right: 44
    fun_args_part2 (74)
        on left: 45 46
        on right: 44
    stmt_assignment (75)
        on left: 47
        on right: 23 65
    stmt_return (76)
        on left: 48
        on right: 27
    stmt_if (77)
        on left: 53
        on right: 26
    $@12 (78)
        on left: 49
        on right: 53
    $@13 (79)
        on left: 50
        on right: 53
    $@14 (80)
        on left: 51
        on right: 53
    $@15 (81)
        on left: 52
        on right: 53
    elseif (82)
        on left: 57 58
        on right: 53 57
    $@16 (83)
        on left: 54
        on right: 57
    $@17 (84)
        on left: 55
        on right: 57
    $@18 (85)
        on left: 56
        on right: 57
    else (86)
        on left: 60 61
        on right: 58
    $@19 (87)
        on left: 59
        on right: 60
    stmt_for (88)
        on left: 64
        on right: 30
    $@20 (89)
        on left: 62
        on right: 64
    $@21 (90)
        on left: 63
        on right: 64
    stmt_for_assign_declare (91)
        on left: 65 66
        on right: 64
    stmt_for_step (92)
        on left: 67
        on right: 64
    stmt_while (93)
        on left: 70
        on right: 28
    $@22 (94)
        on left: 68
        on right: 70
    $@23 (95)
        on left: 69
        on right: 70
    loop_stmts (96)
        on left: 71 73 75 76
        on right: 64 70 71 73 75
    $@24 (97)
        on left: 72
        on right: 73
    $@25 (98)
        on left: 74
        on right: 75
    expression <node> (99)
        on left: 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
        on right: 38 44 47 48 53 57 64 67 70 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94
    arguments (100)
        on left: 101 102
        on right: 10 12 16 18
    args_part1 (101)
        on left: 104
        on right: 101 105
    $@26 (102)
        on left: 103
        on right: 104
    args_part2 (103)
        on left: 105 106
        on right: 104


State 0

    0 $accept: • start $end

    $default  reduce using rule 3 (start)

    start  go to state 1


State 1

    0 $accept: start • $end
    2 start: start • $@1 global_declare program

    $end  shift, and go to state 2

    $default  reduce using rule 1 ($@1)

    $@1  go to state 3


State 2

    0 $accept: start $end •

    $default  accept


State 3

    2 start: start $@1 • global_declare program

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    KW_INT    [reduce using rule 6 (global_declare)]
    $default  reduce using rule 6 (global_declare)

    global_declare  go to state 6
    type            go to state 7
    stmt_declare    go to state 8


State 4

   33 type: KW_INT •

    $default  reduce using rule 33 (type)


State 5

   34 type: KW_CHAR •

    $default  reduce using rule 34 (type)


State 6

    2 start: start $@1 global_declare • program

    $default  reduce using rule 8 (functions)

    program    go to state 9
    functions  go to state 10


State 7

   35 stmt_declare: type • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 11


State 8

    5 global_declare: stmt_declare •

    $default  reduce using rule 5 (global_declare)


State 9

    2 start: start $@1 global_declare program •

    $default  reduce using rule 2 (start)


State 10

    4 program: functions • main
    7 functions: functions • function

    KW_VOID  shift, and go to state 12
    KW_INT   shift, and go to state 13

    main      go to state 14
    function  go to state 15


State 11

   35 stmt_declare: type IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 16
    ST_DOLLAR  shift, and go to state 17
    ST_COMMA   shift, and go to state 18

    ids  go to state 19


State 12

   12 main: KW_VOID • KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL
   18 function: KW_VOID • IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_MAIN     shift, and go to state 20
    IDENTIFIER  shift, and go to state 21


State 13

   10 main: KW_INT • KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL
   16 function: KW_INT • IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    KW_MAIN     shift, and go to state 22
    IDENTIFIER  shift, and go to state 23


State 14

    4 program: functions main •

    $default  reduce using rule 4 (program)


State 15

    7 functions: functions function •

    $default  reduce using rule 7 (functions)


State 16

   38 ids: OP_ASSIGN • expression ids

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 33


State 17

   36 ids: ST_DOLLAR •

    $default  reduce using rule 36 (ids)


State 18

   37 ids: ST_COMMA • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 34


State 19

   35 stmt_declare: type IDENTIFIER ids •

    $default  reduce using rule 35 (stmt_declare)


State 20

   12 main: KW_VOID KW_MAIN • ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 35


State 21

   18 function: KW_VOID IDENTIFIER • ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 36


State 22

   10 main: KW_INT KW_MAIN • ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 37


State 23

   16 function: KW_INT IDENTIFIER • ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    ST_LPAR  shift, and go to state 38


State 24

   93 expression: OP_MINUS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 39


State 25

   92 expression: OP_LOGICAL_NOT • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 40


State 26

   94 expression: ST_LPAR • expression ST_RPAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 41


State 27

   99 expression: LCHAR •

    $default  reduce using rule 99 (expression)


State 28

   98 expression: UCHAR •

    $default  reduce using rule 98 (expression)


State 29

   97 expression: NCHAR •

    $default  reduce using rule 97 (expression)


State 30

   40 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments $@10 ST_RPAR
   95 expression: IDENTIFIER •

    ST_LPAR  shift, and go to state 42

    $default  reduce using rule 95 (expression)


State 31

   96 expression: NUMBER •

    $default  reduce using rule 96 (expression)


State 32

  100 expression: stmt_call_function •

    $default  reduce using rule 100 (expression)


State 33

   38 ids: OP_ASSIGN expression • ids
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_ASSIGN         shift, and go to state 16
    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 17
    ST_COMMA          shift, and go to state 18

    ids  go to state 58


State 34

   37 ids: ST_COMMA IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 16
    ST_DOLLAR  shift, and go to state 17
    ST_COMMA   shift, and go to state 18

    ids  go to state 59


State 35

   12 main: KW_VOID KW_MAIN ST_LPAR • $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 11 ($@3)

    $@3  go to state 60


State 36

   18 function: KW_VOID IDENTIFIER ST_LPAR • $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 17 ($@7)

    $@7  go to state 61


State 37

   10 main: KW_INT KW_MAIN ST_LPAR • $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 9 ($@2)

    $@2  go to state 62


State 38

   16 function: KW_INT IDENTIFIER ST_LPAR • $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    $default  reduce using rule 13 ($@4)

    $@4  go to state 63


State 39

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression
   93           | OP_MINUS expression •

    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 93 (expression)


State 40

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression
   92           | OP_LOGICAL_NOT expression •

    $default  reduce using rule 92 (expression)


State 41

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression
   94           | ST_LPAR expression • ST_RPAR

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_RPAR           shift, and go to state 64


State 42

   40 stmt_call_function: IDENTIFIER ST_LPAR • fun_arguments $@10 ST_RPAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    $default  reduce using rule 42 (fun_arguments)

    stmt_call_function  go to state 32
    fun_arguments       go to state 65
    fun_args_part1      go to state 66
    expression          go to state 67


State 43

   77 expression: expression OP_PLUS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 68


State 44

   78 expression: expression OP_MINUS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 69


State 45

   79 expression: expression OP_MULTIPLY • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 70


State 46

   80 expression: expression OP_DIVIDE • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 71


State 47

   81 expression: expression OP_LESS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 72


State 48

   82 expression: expression OP_LESS_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 73


State 49

   83 expression: expression OP_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 74


State 50

   84 expression: expression OP_NOT_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 75


State 51

   85 expression: expression OP_GREATER • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 76


State 52

   86 expression: expression OP_GREATER_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 77


State 53

   89 expression: expression OP_BITWISE_OR • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 78


State 54

   90 expression: expression OP_BITWISE_AND • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 79


State 55

   91 expression: expression OP_BITWISE_XOR • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 80


State 56

   87 expression: expression OP_LOGICAL_OR • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 81


State 57

   88 expression: expression OP_LOGICAL_AND • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 82


State 58

   38 ids: OP_ASSIGN expression ids •

    $default  reduce using rule 38 (ids)


State 59

   37 ids: ST_COMMA IDENTIFIER ids •

    $default  reduce using rule 37 (ids)


State 60

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 102 (arguments)

    type        go to state 83
    arguments   go to state 84
    args_part1  go to state 85


State 61

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 102 (arguments)

    type        go to state 83
    arguments   go to state 86
    args_part1  go to state 85


State 62

   10 main: KW_INT KW_MAIN ST_LPAR $@2 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 102 (arguments)

    type        go to state 83
    arguments   go to state 87
    args_part1  go to state 85


State 63

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 • arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 102 (arguments)

    type        go to state 83
    arguments   go to state 88
    args_part1  go to state 85


State 64

   94 expression: ST_LPAR expression ST_RPAR •

    $default  reduce using rule 94 (expression)


State 65

   40 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments • $@10 ST_RPAR

    $default  reduce using rule 39 ($@10)

    $@10  go to state 89


State 66

   41 fun_arguments: fun_args_part1 •

    $default  reduce using rule 41 (fun_arguments)


State 67

   44 fun_args_part1: expression • $@11 fun_args_part2
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57

    $default  reduce using rule 43 ($@11)

    $@11  go to state 90


State 68

   77 expression: expression • OP_PLUS expression
   77           | expression OP_PLUS expression •
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 77 (expression)


State 69

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   78           | expression OP_MINUS expression •
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 78 (expression)


State 70

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   79           | expression OP_MULTIPLY expression •
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 79 (expression)


State 71

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   80           | expression OP_DIVIDE expression •
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 80 (expression)


State 72

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   81           | expression OP_LESS expression •
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 43
    OP_MINUS     shift, and go to state 44
    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 81 (expression)


State 73

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   82           | expression OP_LESS_EQUAL expression •
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 43
    OP_MINUS     shift, and go to state 44
    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 82 (expression)


State 74

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   83           | expression OP_EQUAL expression •
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 83 (expression)


State 75

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   84           | expression OP_NOT_EQUAL expression •
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 84 (expression)


State 76

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   85           | expression OP_GREATER expression •
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 43
    OP_MINUS       shift, and go to state 44
    OP_MULTIPLY    shift, and go to state 45
    OP_DIVIDE      shift, and go to state 46
    OP_LESS        shift, and go to state 47
    OP_LESS_EQUAL  shift, and go to state 48

    $default  reduce using rule 85 (expression)


State 77

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   86           | expression OP_GREATER_EQUAL expression •
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 43
    OP_MINUS       shift, and go to state 44
    OP_MULTIPLY    shift, and go to state 45
    OP_DIVIDE      shift, and go to state 46
    OP_LESS        shift, and go to state 47
    OP_LESS_EQUAL  shift, and go to state 48

    $default  reduce using rule 86 (expression)


State 78

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   89           | expression OP_BITWISE_OR expression •
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 89 (expression)


State 79

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   90           | expression OP_BITWISE_AND expression •
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 90 (expression)


State 80

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression
   91           | expression OP_BITWISE_XOR expression •

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 91 (expression)


State 81

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   87           | expression OP_LOGICAL_OR expression •
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55

    $default  reduce using rule 87 (expression)


State 82

   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   88           | expression OP_LOGICAL_AND expression •
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55

    $default  reduce using rule 88 (expression)


State 83

  104 args_part1: type • IDENTIFIER $@26 args_part2

    IDENTIFIER  shift, and go to state 91


State 84

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 92


State 85

  101 arguments: args_part1 •

    $default  reduce using rule 101 (arguments)


State 86

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 93


State 87

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 94


State 88

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments • ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    ST_RPAR  shift, and go to state 95


State 89

   40 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@10 • ST_RPAR

    ST_RPAR  shift, and go to state 96


State 90

   44 fun_args_part1: expression $@11 • fun_args_part2

    ST_COMMA  shift, and go to state 97

    $default  reduce using rule 46 (fun_args_part2)

    fun_args_part2  go to state 98


State 91

  104 args_part1: type IDENTIFIER • $@26 args_part2

    $default  reduce using rule 103 ($@26)

    $@26  go to state 99


State 92

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 100


State 93

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 101


State 94

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 102


State 95

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR • ST_LCURL $@5 stmts $@6 ST_RCURL

    ST_LCURL  shift, and go to state 103


State 96

   40 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@10 ST_RPAR •

    $default  reduce using rule 40 (stmt_call_function)


State 97

   45 fun_args_part2: ST_COMMA • fun_args_part1

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    fun_args_part1      go to state 104
    expression          go to state 67


State 98

   44 fun_args_part1: expression $@11 fun_args_part2 •

    $default  reduce using rule 44 (fun_args_part1)


State 99

  104 args_part1: type IDENTIFIER $@26 • args_part2

    ST_COMMA  shift, and go to state 105

    $default  reduce using rule 106 (args_part2)

    args_part2  go to state 106


State 100

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    ST_DOLLAR  reduce using rule 31 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 114
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 101

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    ST_DOLLAR  reduce using rule 31 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 124
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 102

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    ST_DOLLAR  reduce using rule 31 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 125
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 103

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL • $@5 stmts $@6 ST_RCURL

    $default  reduce using rule 14 ($@5)

    $@5  go to state 126


State 104

   45 fun_args_part2: ST_COMMA fun_args_part1 •

    $default  reduce using rule 45 (fun_args_part2)


State 105

  105 args_part2: ST_COMMA • args_part1

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    type        go to state 83
    args_part1  go to state 127


State 106

  104 args_part1: type IDENTIFIER $@26 args_part2 •

    $default  reduce using rule 104 (args_part1)


State 107

   53 stmt_if: KW_IF • $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    $default  reduce using rule 49 ($@12)

    $@12  go to state 128


State 108

   48 stmt_return: KW_RETURN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 129


State 109

   64 stmt_for: KW_FOR • ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_LPAR  shift, and go to state 130


State 110

   24 stmt: KW_BREAK • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 131


State 111

   70 stmt_while: KW_WHILE • ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_LPAR  shift, and go to state 132


State 112

   25 stmt: KW_CONTINUE • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 133


State 113

   40 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments $@10 ST_RPAR
   47 stmt_assignment: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 134
    ST_LPAR    shift, and go to state 42


State 114

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 135


State 115

   20 stmts: stmt • $@8 stmts

    $default  reduce using rule 19 ($@8)

    $@8  go to state 136


State 116

   32 stmt: $@9 • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 137


State 117

   22 stmt: stmt_declare •

    $default  reduce using rule 22 (stmt)


State 118

   29 stmt: stmt_call_function •

    $default  reduce using rule 29 (stmt)


State 119

   23 stmt: stmt_assignment •

    $default  reduce using rule 23 (stmt)


State 120

   27 stmt: stmt_return •

    $default  reduce using rule 27 (stmt)


State 121

   26 stmt: stmt_if •

    $default  reduce using rule 26 (stmt)


State 122

   30 stmt: stmt_for •

    $default  reduce using rule 30 (stmt)


State 123

   28 stmt: stmt_while •

    $default  reduce using rule 28 (stmt)


State 124

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 138


State 125

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 139


State 126

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 • stmts $@6 ST_RCURL

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    ST_DOLLAR  reduce using rule 31 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 140
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 127

  105 args_part2: ST_COMMA args_part1 •

    $default  reduce using rule 105 (args_part2)


State 128

   53 stmt_if: KW_IF $@12 • ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    ST_LPAR  shift, and go to state 141


State 129

   48 stmt_return: KW_RETURN expression • ST_DOLLAR
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 142


State 130

   64 stmt_for: KW_FOR ST_LPAR • stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL

    KW_INT      shift, and go to state 4
    KW_CHAR     shift, and go to state 5
    IDENTIFIER  shift, and go to state 143

    type                     go to state 7
    stmt_declare             go to state 144
    stmt_assignment          go to state 145
    stmt_for_assign_declare  go to state 146


State 131

   24 stmt: KW_BREAK ST_DOLLAR •

    $default  reduce using rule 24 (stmt)


State 132

   70 stmt_while: KW_WHILE ST_LPAR • $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 68 ($@22)

    $@22  go to state 147


State 133

   25 stmt: KW_CONTINUE ST_DOLLAR •

    $default  reduce using rule 25 (stmt)


State 134

   47 stmt_assignment: IDENTIFIER OP_ASSIGN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 148


State 135

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 12 (main)


State 136

   20 stmts: stmt $@8 • stmts

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    KW_IF        [reduce using rule 21 (stmts)]
    KW_RETURN    [reduce using rule 21 (stmts)]
    KW_INT       [reduce using rule 21 (stmts)]
    KW_FOR       [reduce using rule 21 (stmts)]
    KW_BREAK     [reduce using rule 21 (stmts)]
    KW_CHAR      [reduce using rule 21 (stmts)]
    KW_WHILE     [reduce using rule 21 (stmts)]
    KW_CONTINUE  [reduce using rule 21 (stmts)]
    ST_DOLLAR    reduce using rule 21 (stmts)
    ST_DOLLAR    [reduce using rule 31 ($@9)]
    IDENTIFIER   [reduce using rule 21 (stmts)]
    $default     reduce using rule 21 (stmts)

    stmts               go to state 149
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 137

   32 stmt: $@9 ST_DOLLAR •

    $default  reduce using rule 32 (stmt)


State 138

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 18 (function)


State 139

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 10 (main)


State 140

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts • $@6 ST_RCURL

    $default  reduce using rule 15 ($@6)

    $@6  go to state 150


State 141

   53 stmt_if: KW_IF $@12 ST_LPAR • $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    $default  reduce using rule 50 ($@13)

    $@13  go to state 151


State 142

   48 stmt_return: KW_RETURN expression ST_DOLLAR •

    $default  reduce using rule 48 (stmt_return)


State 143

   47 stmt_assignment: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 134


State 144

   66 stmt_for_assign_declare: stmt_declare •

    $default  reduce using rule 66 (stmt_for_assign_declare)


State 145

   65 stmt_for_assign_declare: stmt_assignment •

    $default  reduce using rule 65 (stmt_for_assign_declare)


State 146

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare • $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 62 ($@20)

    $@20  go to state 152


State 147

   70 stmt_while: KW_WHILE ST_LPAR $@22 • expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 153


State 148

   47 stmt_assignment: IDENTIFIER OP_ASSIGN expression • ST_DOLLAR
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 154


State 149

   20 stmts: stmt $@8 stmts •

    $default  reduce using rule 20 (stmts)


State 150

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 • ST_RCURL

    ST_RCURL  shift, and go to state 155


State 151

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 • expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 156


State 152

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 • expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 157


State 153

   70 stmt_while: KW_WHILE ST_LPAR $@22 expression • $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57

    $default  reduce using rule 69 ($@23)

    $@23  go to state 158


State 154

   47 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR •

    $default  reduce using rule 47 (stmt_assignment)


State 155

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL •

    $default  reduce using rule 16 (function)


State 156

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression • ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_RPAR           shift, and go to state 159


State 157

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression • ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 160


State 158

   70 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 • ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_RPAR  shift, and go to state 161


State 159

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR • $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    $default  reduce using rule 51 ($@14)

    $@14  go to state 162


State 160

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR • $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 63 ($@21)

    $@21  go to state 163


State 161

   70 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR • ST_LCURL loop_stmts ST_RCURL

    ST_LCURL  shift, and go to state 164


State 162

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 • ST_LCURL stmts ST_RCURL $@15 elseif

    ST_LCURL  shift, and go to state 165


State 163

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 • stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL

    IDENTIFIER  shift, and go to state 166

    stmt_for_step  go to state 167


State 164

   70 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL • loop_stmts ST_RCURL

    $default  reduce using rule 76 (loop_stmts)

    loop_stmts  go to state 168


State 165

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL • stmts ST_RCURL $@15 elseif

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    ST_DOLLAR  reduce using rule 31 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 169
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 166

   67 stmt_for_step: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 170


State 167

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step • ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_RPAR  shift, and go to state 171


State 168

   70 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts • ST_RCURL
   71 loop_stmts: loop_stmts • stmts
   73           | loop_stmts • KW_BREAK $@24 ST_DOLLAR
   75           | loop_stmts • KW_CONTINUE $@25 ST_DOLLAR

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 172
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 173
    ST_RCURL     shift, and go to state 174
    IDENTIFIER   shift, and go to state 113

    KW_IF        [reduce using rule 21 (stmts)]
    KW_RETURN    [reduce using rule 21 (stmts)]
    KW_INT       [reduce using rule 21 (stmts)]
    KW_FOR       [reduce using rule 21 (stmts)]
    KW_BREAK     [reduce using rule 21 (stmts)]
    KW_CHAR      [reduce using rule 21 (stmts)]
    KW_WHILE     [reduce using rule 21 (stmts)]
    KW_CONTINUE  [reduce using rule 21 (stmts)]
    ST_RCURL     [reduce using rule 21 (stmts)]
    ST_DOLLAR    reduce using rule 21 (stmts)
    ST_DOLLAR    [reduce using rule 31 ($@9)]
    IDENTIFIER   [reduce using rule 21 (stmts)]
    $default     reduce using rule 21 (stmts)

    stmts               go to state 175
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 169

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts • ST_RCURL $@15 elseif

    ST_RCURL  shift, and go to state 176


State 170

   67 stmt_for_step: IDENTIFIER OP_ASSIGN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 177


State 171

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR • ST_LCURL loop_stmts ST_RCURL

    ST_LCURL  shift, and go to state 178


State 172

   24 stmt: KW_BREAK • ST_DOLLAR
   73 loop_stmts: loop_stmts KW_BREAK • $@24 ST_DOLLAR

    ST_DOLLAR  shift, and go to state 131

    ST_DOLLAR  [reduce using rule 72 ($@24)]

    $@24  go to state 179


State 173

   25 stmt: KW_CONTINUE • ST_DOLLAR
   75 loop_stmts: loop_stmts KW_CONTINUE • $@25 ST_DOLLAR

    ST_DOLLAR  shift, and go to state 133

    ST_DOLLAR  [reduce using rule 74 ($@25)]

    $@25  go to state 180


State 174

   70 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL •

    $default  reduce using rule 70 (stmt_while)


State 175

   71 loop_stmts: loop_stmts stmts •

    $default  reduce using rule 71 (loop_stmts)


State 176

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL • $@15 elseif

    $default  reduce using rule 52 ($@15)

    $@15  go to state 181


State 177

   67 stmt_for_step: IDENTIFIER OP_ASSIGN expression • ST_DOLLAR
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 182


State 178

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL • loop_stmts ST_RCURL

    $default  reduce using rule 76 (loop_stmts)

    loop_stmts  go to state 183


State 179

   73 loop_stmts: loop_stmts KW_BREAK $@24 • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 184


State 180

   75 loop_stmts: loop_stmts KW_CONTINUE $@25 • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 185


State 181

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 • elseif

    KW_ELSE    shift, and go to state 186
    KW_ELSEIF  shift, and go to state 187

    $default  reduce using rule 61 (else)

    elseif  go to state 188
    else    go to state 189


State 182

   67 stmt_for_step: IDENTIFIER OP_ASSIGN expression ST_DOLLAR •

    $default  reduce using rule 67 (stmt_for_step)


State 183

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts • ST_RCURL
   71 loop_stmts: loop_stmts • stmts
   73           | loop_stmts • KW_BREAK $@24 ST_DOLLAR
   75           | loop_stmts • KW_CONTINUE $@25 ST_DOLLAR

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 172
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 173
    ST_RCURL     shift, and go to state 190
    IDENTIFIER   shift, and go to state 113

    KW_IF        [reduce using rule 21 (stmts)]
    KW_RETURN    [reduce using rule 21 (stmts)]
    KW_INT       [reduce using rule 21 (stmts)]
    KW_FOR       [reduce using rule 21 (stmts)]
    KW_BREAK     [reduce using rule 21 (stmts)]
    KW_CHAR      [reduce using rule 21 (stmts)]
    KW_WHILE     [reduce using rule 21 (stmts)]
    KW_CONTINUE  [reduce using rule 21 (stmts)]
    ST_RCURL     [reduce using rule 21 (stmts)]
    ST_DOLLAR    reduce using rule 21 (stmts)
    ST_DOLLAR    [reduce using rule 31 ($@9)]
    IDENTIFIER   [reduce using rule 21 (stmts)]
    $default     reduce using rule 21 (stmts)

    stmts               go to state 175
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 184

   73 loop_stmts: loop_stmts KW_BREAK $@24 ST_DOLLAR •

    $default  reduce using rule 73 (loop_stmts)


State 185

   75 loop_stmts: loop_stmts KW_CONTINUE $@25 ST_DOLLAR •

    $default  reduce using rule 75 (loop_stmts)


State 186

   60 else: KW_ELSE • ST_LCURL $@19 stmts ST_RCURL

    ST_LCURL  shift, and go to state 191


State 187

   57 elseif: KW_ELSEIF • ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    ST_LPAR  shift, and go to state 192


State 188

   53 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif •

    $default  reduce using rule 53 (stmt_if)


State 189

   58 elseif: else •

    $default  reduce using rule 58 (elseif)


State 190

   64 stmt_for: KW_FOR ST_LPAR stmt_for_assign_declare $@20 expression ST_DOLLAR $@21 stmt_for_step ST_RPAR ST_LCURL loop_stmts ST_RCURL •

    $default  reduce using rule 64 (stmt_for)


State 191

   60 else: KW_ELSE ST_LCURL • $@19 stmts ST_RCURL

    $default  reduce using rule 59 ($@19)

    $@19  go to state 193


State 192

   57 elseif: KW_ELSEIF ST_LPAR • $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    $default  reduce using rule 54 ($@16)

    $@16  go to state 194


State 193

   60 else: KW_ELSE ST_LCURL $@19 • stmts ST_RCURL

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    ST_DOLLAR  reduce using rule 31 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 195
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 194

   57 elseif: KW_ELSEIF ST_LPAR $@16 • expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 196


State 195

   60 else: KW_ELSE ST_LCURL $@19 stmts • ST_RCURL

    ST_RCURL  shift, and go to state 197


State 196

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression • ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif
   77 expression: expression • OP_PLUS expression
   78           | expression • OP_MINUS expression
   79           | expression • OP_MULTIPLY expression
   80           | expression • OP_DIVIDE expression
   81           | expression • OP_LESS expression
   82           | expression • OP_LESS_EQUAL expression
   83           | expression • OP_EQUAL expression
   84           | expression • OP_NOT_EQUAL expression
   85           | expression • OP_GREATER expression
   86           | expression • OP_GREATER_EQUAL expression
   87           | expression • OP_LOGICAL_OR expression
   88           | expression • OP_LOGICAL_AND expression
   89           | expression • OP_BITWISE_OR expression
   90           | expression • OP_BITWISE_AND expression
   91           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_RPAR           shift, and go to state 198


State 197

   60 else: KW_ELSE ST_LCURL $@19 stmts ST_RCURL •

    $default  reduce using rule 60 (else)


State 198

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR • $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    $default  reduce using rule 55 ($@17)

    $@17  go to state 199


State 199

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 • ST_LCURL stmts ST_RCURL $@18 elseif

    ST_LCURL  shift, and go to state 200


State 200

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL • stmts ST_RCURL $@18 elseif

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 110
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 111
    KW_CONTINUE  shift, and go to state 112
    IDENTIFIER   shift, and go to state 113

    ST_DOLLAR  reduce using rule 31 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 201
    stmt                go to state 115
    $@9                 go to state 116
    type                go to state 7
    stmt_declare        go to state 117
    stmt_call_function  go to state 118
    stmt_assignment     go to state 119
    stmt_return         go to state 120
    stmt_if             go to state 121
    stmt_for            go to state 122
    stmt_while          go to state 123


State 201

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts • ST_RCURL $@18 elseif

    ST_RCURL  shift, and go to state 202


State 202

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL • $@18 elseif

    $default  reduce using rule 56 ($@18)

    $@18  go to state 203


State 203

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 • elseif

    KW_ELSE    shift, and go to state 186
    KW_ELSEIF  shift, and go to state 187

    $default  reduce using rule 61 (else)

    elseif  go to state 204
    else    go to state 189


State 204

   57 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif •

    $default  reduce using rule 57 (elseif)

Terminals unused in grammar

    NEW_LINE
    OTHER
    ST_LBR
    ST_RBR
    ST_SEMICOLON


State 3 conflicts: 1 shift/reduce
State 132 conflicts: 7 shift/reduce, 1 reduce/reduce
State 163 conflicts: 10 shift/reduce, 1 reduce/reduce
State 175 conflicts: 10 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: start $end

    1 $@1: %empty

    2 start: start $@1 global_declare program
    3      | %empty

    4 program: functions main

    5 global_declare: stmt_declare
    6               | %empty

    7 functions: functions function
    8          | %empty

    9 $@2: %empty

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   11 $@3: %empty

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   13 $@4: %empty

   14 $@5: %empty

   15 $@6: %empty

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

   17 $@7: %empty

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   19 $@8: %empty

   20 stmts: stmt $@8 stmts
   21      | %empty

   22 stmt: stmt_declare
   23     | stmt_assignment
   24     | stmt_if
   25     | stmt_return
   26     | stmt_while
   27     | stmt_call_function
   28     | stmt_for

   29 $@9: %empty

   30 stmt: $@9 ST_DOLLAR

   31 type: KW_INT
   32     | KW_CHAR

   33 stmt_declare: type IDENTIFIER ids

   34 ids: ST_DOLLAR
   35    | ST_COMMA IDENTIFIER ids
   36    | OP_ASSIGN expression ids

   37 $@10: %empty

   38 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@10 ST_RPAR

   39 fun_arguments: fun_args_part1
   40              | %empty

   41 $@11: %empty

   42 fun_args_part1: expression $@11 fun_args_part2

   43 fun_args_part2: ST_COMMA fun_args_part1
   44               | %empty

   45 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR

   46 stmt_return: KW_RETURN expression ST_DOLLAR

   47 $@12: %empty

   48 $@13: %empty

   49 $@14: %empty

   50 $@15: %empty

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

   52 $@16: %empty

   53 $@17: %empty

   54 $@18: %empty

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif
   56       | else

   57 $@19: %empty

   58 else: KW_ELSE ST_LCURL $@19 stmts ST_RCURL
   59     | %empty

   60 $@20: %empty

   61 $@21: %empty

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

   63 stmt_for_assign_declare: stmt_assignment
   64                        | stmt_declare

   65 $@22: %empty

   66 $@23: %empty

   67 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

   68 loop_stmts: loop_stmts stmts

   69 $@24: %empty

   70 loop_stmts: loop_stmts KW_BREAK $@24 ST_DOLLAR
   71           | loop_stmts KW_CONTINUE ST_DOLLAR
   72           | %empty

   73 expression: expression OP_PLUS expression
   74           | expression OP_MINUS expression
   75           | expression OP_MULTIPLY expression
   76           | expression OP_DIVIDE expression
   77           | expression OP_LESS expression
   78           | expression OP_LESS_EQUAL expression
   79           | expression OP_EQUAL expression
   80           | expression OP_NOT_EQUAL expression
   81           | expression OP_GREATER expression
   82           | expression OP_GREATER_EQUAL expression
   83           | expression OP_LOGICAL_OR expression
   84           | expression OP_LOGICAL_AND expression
   85           | expression OP_BITWISE_OR expression
   86           | expression OP_BITWISE_AND expression
   87           | expression OP_BITWISE_XOR expression
   88           | OP_LOGICAL_NOT expression
   89           | OP_MINUS expression
   90           | ST_LPAR expression ST_RPAR
   91           | IDENTIFIER
   92           | NUMBER
   93           | NCHAR
   94           | UCHAR
   95           | LCHAR
   96           | stmt_call_function

   97 arguments: args_part1
   98          | %empty

   99 $@25: %empty

  100 args_part1: type IDENTIFIER $@25 args_part2

  101 args_part2: ST_COMMA args_part1
  102           | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_VOID (258) 12 18
    KW_IF (259) 51
    KW_RETURN (260) 46
    KW_INT (261) 10 16 31
    KW_ELSE (262) 58
    KW_MAIN (263) 10 12
    KW_FOR (264) 62
    KW_BREAK (265) 70
    KW_CHAR (266) 32
    KW_WHILE (267) 67
    KW_CONTINUE (268) 71
    KW_ELSEIF (269) 55
    NEW_LINE (270)
    OTHER (271)
    OP_ASSIGN (272) 36 45
    OP_PLUS (273) 73
    OP_MINUS (274) 74 89
    OP_MULTIPLY (275) 75
    OP_DIVIDE (276) 76
    OP_LESS (277) 77
    OP_LESS_EQUAL (278) 78
    OP_EQUAL (279) 79
    OP_NOT_EQUAL (280) 80
    OP_GREATER (281) 81
    OP_GREATER_EQUAL (282) 82
    OP_BITWISE_OR (283) 85
    OP_BITWISE_AND (284) 86
    OP_BITWISE_XOR (285) 87
    OP_LOGICAL_OR (286) 83
    OP_LOGICAL_AND (287) 84
    OP_LOGICAL_NOT (288) 88
    ST_LPAR (289) 10 12 16 18 38 51 55 62 67 90
    ST_RPAR (290) 10 12 16 18 38 51 55 62 67 90
    ST_LCURL (291) 10 12 16 18 51 55 58 62 67
    ST_RCURL (292) 10 12 16 18 51 55 58 62 67
    ST_LBR (293)
    ST_RBR (294)
    ST_DOLLAR (295) 30 34 45 46 62 70 71
    ST_COMMA (296) 35 43 101
    ST_SEMICOLON (297)
    LCHAR <charVal> (298) 95
    UCHAR <charVal> (299) 94
    NCHAR <charVal> (300) 93
    IDENTIFIER <stringVal> (301) 16 18 33 35 38 45 91 100
    NUMBER <intVal> (302) 92


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    start (49)
        on left: 2 3
        on right: 0 2
    $@1 (50)
        on left: 1
        on right: 2
    program (51)
        on left: 4
        on right: 2
    global_declare (52)
        on left: 5 6
        on right: 2
    functions (53)
        on left: 7 8
        on right: 4 7
    main (54)
        on left: 10 12
        on right: 4
    $@2 (55)
        on left: 9
        on right: 10
    $@3 (56)
        on left: 11
        on right: 12
    function <intVal> (57)
        on left: 16 18
        on right: 7
    $@4 (58)
        on left: 13
        on right: 16
    $@5 (59)
        on left: 14
        on right: 16
    $@6 (60)
        on left: 15
        on right: 16
    $@7 (61)
        on left: 17
        on right: 18
    stmts (62)
        on left: 20 21
        on right: 10 12 16 18 20 51 55 58 68
    $@8 (63)
        on left: 19
        on right: 20
    stmt (64)
        on left: 22 23 24 25 26 27 28 30
        on right: 20
    $@9 (65)
        on left: 29
        on right: 30
    type (66)
        on left: 31 32
        on right: 33 100
    stmt_declare (67)
        on left: 33
        on right: 5 22 64
    ids <intVal> (68)
        on left: 34 35 36
        on right: 33 35 36
    stmt_call_function <intVal> (69)
        on left: 38
        on right: 27 96
    $@10 (70)
        on left: 37
        on right: 38
    fun_arguments (71)
        on left: 39 40
        on right: 38
    fun_args_part1 (72)
        on left: 42
        on right: 39 43
    $@11 (73)
        on left: 41
        on right: 42
    fun_args_part2 (74)
        on left: 43 44
        on right: 42
    stmt_assignment (75)
        on left: 45
        on right: 23 63
    stmt_return (76)
        on left: 46
        on right: 25
    stmt_if (77)
        on left: 51
        on right: 24
    $@12 (78)
        on left: 47
        on right: 51
    $@13 (79)
        on left: 48
        on right: 51
    $@14 (80)
        on left: 49
        on right: 51
    $@15 (81)
        on left: 50
        on right: 51
    elseif (82)
        on left: 55 56
        on right: 51 55
    $@16 (83)
        on left: 52
        on right: 55
    $@17 (84)
        on left: 53
        on right: 55
    $@18 (85)
        on left: 54
        on right: 55
    else (86)
        on left: 58 59
        on right: 56
    $@19 (87)
        on left: 57
        on right: 58
    stmt_for (88)
        on left: 62
        on right: 28
    $@20 (89)
        on left: 60
        on right: 62
    $@21 (90)
        on left: 61
        on right: 62
    stmt_for_assign_declare (91)
        on left: 63 64
        on right: 62
    stmt_while (92)
        on left: 67
        on right: 26
    $@22 (93)
        on left: 65
        on right: 67
    $@23 (94)
        on left: 66
        on right: 67
    loop_stmts (95)
        on left: 68 70 71 72
        on right: 62 67 68 70 71
    $@24 (96)
        on left: 69
        on right: 70
    expression <node> (97)
        on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96
        on right: 36 42 45 46 51 55 62 67 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90
    arguments (98)
        on left: 97 98
        on right: 10 12 16 18
    args_part1 (99)
        on left: 100
        on right: 97 101
    $@25 (100)
        on left: 99
        on right: 100
    args_part2 (101)
        on left: 101 102
        on right: 100


State 0

    0 $accept: • start $end

    $default  reduce using rule 3 (start)

    start  go to state 1


State 1

    0 $accept: start • $end
    2 start: start • $@1 global_declare program

    $end  shift, and go to state 2

    $default  reduce using rule 1 ($@1)

    $@1  go to state 3


State 2

    0 $accept: start $end •

    $default  accept


State 3

    2 start: start $@1 • global_declare program

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    KW_INT    [reduce using rule 6 (global_declare)]
    $default  reduce using rule 6 (global_declare)

    global_declare  go to state 6
    type            go to state 7
    stmt_declare    go to state 8


State 4

   31 type: KW_INT •

    $default  reduce using rule 31 (type)


State 5

   32 type: KW_CHAR •

    $default  reduce using rule 32 (type)


State 6

    2 start: start $@1 global_declare • program

    $default  reduce using rule 8 (functions)

    program    go to state 9
    functions  go to state 10


State 7

   33 stmt_declare: type • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 11


State 8

    5 global_declare: stmt_declare •

    $default  reduce using rule 5 (global_declare)


State 9

    2 start: start $@1 global_declare program •

    $default  reduce using rule 2 (start)


State 10

    4 program: functions • main
    7 functions: functions • function

    KW_VOID  shift, and go to state 12
    KW_INT   shift, and go to state 13

    main      go to state 14
    function  go to state 15


State 11

   33 stmt_declare: type IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 16
    ST_DOLLAR  shift, and go to state 17
    ST_COMMA   shift, and go to state 18

    ids  go to state 19


State 12

   12 main: KW_VOID • KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL
   18 function: KW_VOID • IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_MAIN     shift, and go to state 20
    IDENTIFIER  shift, and go to state 21


State 13

   10 main: KW_INT • KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL
   16 function: KW_INT • IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    KW_MAIN     shift, and go to state 22
    IDENTIFIER  shift, and go to state 23


State 14

    4 program: functions main •

    $default  reduce using rule 4 (program)


State 15

    7 functions: functions function •

    $default  reduce using rule 7 (functions)


State 16

   36 ids: OP_ASSIGN • expression ids

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 33


State 17

   34 ids: ST_DOLLAR •

    $default  reduce using rule 34 (ids)


State 18

   35 ids: ST_COMMA • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 34


State 19

   33 stmt_declare: type IDENTIFIER ids •

    $default  reduce using rule 33 (stmt_declare)


State 20

   12 main: KW_VOID KW_MAIN • ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 35


State 21

   18 function: KW_VOID IDENTIFIER • ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 36


State 22

   10 main: KW_INT KW_MAIN • ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 37


State 23

   16 function: KW_INT IDENTIFIER • ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    ST_LPAR  shift, and go to state 38


State 24

   89 expression: OP_MINUS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 39


State 25

   88 expression: OP_LOGICAL_NOT • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 40


State 26

   90 expression: ST_LPAR • expression ST_RPAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 41


State 27

   95 expression: LCHAR •

    $default  reduce using rule 95 (expression)


State 28

   94 expression: UCHAR •

    $default  reduce using rule 94 (expression)


State 29

   93 expression: NCHAR •

    $default  reduce using rule 93 (expression)


State 30

   38 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments $@10 ST_RPAR
   91 expression: IDENTIFIER •

    ST_LPAR  shift, and go to state 42

    $default  reduce using rule 91 (expression)


State 31

   92 expression: NUMBER •

    $default  reduce using rule 92 (expression)


State 32

   96 expression: stmt_call_function •

    $default  reduce using rule 96 (expression)


State 33

   36 ids: OP_ASSIGN expression • ids
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_ASSIGN         shift, and go to state 16
    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 17
    ST_COMMA          shift, and go to state 18

    ids  go to state 58


State 34

   35 ids: ST_COMMA IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 16
    ST_DOLLAR  shift, and go to state 17
    ST_COMMA   shift, and go to state 18

    ids  go to state 59


State 35

   12 main: KW_VOID KW_MAIN ST_LPAR • $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 11 ($@3)

    $@3  go to state 60


State 36

   18 function: KW_VOID IDENTIFIER ST_LPAR • $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 17 ($@7)

    $@7  go to state 61


State 37

   10 main: KW_INT KW_MAIN ST_LPAR • $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 9 ($@2)

    $@2  go to state 62


State 38

   16 function: KW_INT IDENTIFIER ST_LPAR • $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    $default  reduce using rule 13 ($@4)

    $@4  go to state 63


State 39

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression
   89           | OP_MINUS expression •

    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 89 (expression)


State 40

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression
   88           | OP_LOGICAL_NOT expression •

    $default  reduce using rule 88 (expression)


State 41

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression
   90           | ST_LPAR expression • ST_RPAR

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_RPAR           shift, and go to state 64


State 42

   38 stmt_call_function: IDENTIFIER ST_LPAR • fun_arguments $@10 ST_RPAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    $default  reduce using rule 40 (fun_arguments)

    stmt_call_function  go to state 32
    fun_arguments       go to state 65
    fun_args_part1      go to state 66
    expression          go to state 67


State 43

   73 expression: expression OP_PLUS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 68


State 44

   74 expression: expression OP_MINUS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 69


State 45

   75 expression: expression OP_MULTIPLY • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 70


State 46

   76 expression: expression OP_DIVIDE • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 71


State 47

   77 expression: expression OP_LESS • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 72


State 48

   78 expression: expression OP_LESS_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 73


State 49

   79 expression: expression OP_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 74


State 50

   80 expression: expression OP_NOT_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 75


State 51

   81 expression: expression OP_GREATER • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 76


State 52

   82 expression: expression OP_GREATER_EQUAL • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 77


State 53

   85 expression: expression OP_BITWISE_OR • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 78


State 54

   86 expression: expression OP_BITWISE_AND • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 79


State 55

   87 expression: expression OP_BITWISE_XOR • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 80


State 56

   83 expression: expression OP_LOGICAL_OR • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 81


State 57

   84 expression: expression OP_LOGICAL_AND • expression

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 82


State 58

   36 ids: OP_ASSIGN expression ids •

    $default  reduce using rule 36 (ids)


State 59

   35 ids: ST_COMMA IDENTIFIER ids •

    $default  reduce using rule 35 (ids)


State 60

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 98 (arguments)

    type        go to state 83
    arguments   go to state 84
    args_part1  go to state 85


State 61

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 98 (arguments)

    type        go to state 83
    arguments   go to state 86
    args_part1  go to state 85


State 62

   10 main: KW_INT KW_MAIN ST_LPAR $@2 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 98 (arguments)

    type        go to state 83
    arguments   go to state 87
    args_part1  go to state 85


State 63

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 • arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    $default  reduce using rule 98 (arguments)

    type        go to state 83
    arguments   go to state 88
    args_part1  go to state 85


State 64

   90 expression: ST_LPAR expression ST_RPAR •

    $default  reduce using rule 90 (expression)


State 65

   38 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments • $@10 ST_RPAR

    $default  reduce using rule 37 ($@10)

    $@10  go to state 89


State 66

   39 fun_arguments: fun_args_part1 •

    $default  reduce using rule 39 (fun_arguments)


State 67

   42 fun_args_part1: expression • $@11 fun_args_part2
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57

    $default  reduce using rule 41 ($@11)

    $@11  go to state 90


State 68

   73 expression: expression • OP_PLUS expression
   73           | expression OP_PLUS expression •
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 73 (expression)


State 69

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   74           | expression OP_MINUS expression •
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 74 (expression)


State 70

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   75           | expression OP_MULTIPLY expression •
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 75 (expression)


State 71

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   76           | expression OP_DIVIDE expression •
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 76 (expression)


State 72

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   77           | expression OP_LESS expression •
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 43
    OP_MINUS     shift, and go to state 44
    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 77 (expression)


State 73

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   78           | expression OP_LESS_EQUAL expression •
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 43
    OP_MINUS     shift, and go to state 44
    OP_MULTIPLY  shift, and go to state 45
    OP_DIVIDE    shift, and go to state 46

    $default  reduce using rule 78 (expression)


State 74

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   79           | expression OP_EQUAL expression •
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 79 (expression)


State 75

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   80           | expression OP_NOT_EQUAL expression •
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 80 (expression)


State 76

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   81           | expression OP_GREATER expression •
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 43
    OP_MINUS       shift, and go to state 44
    OP_MULTIPLY    shift, and go to state 45
    OP_DIVIDE      shift, and go to state 46
    OP_LESS        shift, and go to state 47
    OP_LESS_EQUAL  shift, and go to state 48

    $default  reduce using rule 81 (expression)


State 77

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   82           | expression OP_GREATER_EQUAL expression •
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 43
    OP_MINUS       shift, and go to state 44
    OP_MULTIPLY    shift, and go to state 45
    OP_DIVIDE      shift, and go to state 46
    OP_LESS        shift, and go to state 47
    OP_LESS_EQUAL  shift, and go to state 48

    $default  reduce using rule 82 (expression)


State 78

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   85           | expression OP_BITWISE_OR expression •
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 85 (expression)


State 79

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   86           | expression OP_BITWISE_AND expression •
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 86 (expression)


State 80

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression
   87           | expression OP_BITWISE_XOR expression •

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52

    $default  reduce using rule 87 (expression)


State 81

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   83           | expression OP_LOGICAL_OR expression •
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55

    $default  reduce using rule 83 (expression)


State 82

   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   84           | expression OP_LOGICAL_AND expression •
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55

    $default  reduce using rule 84 (expression)


State 83

  100 args_part1: type • IDENTIFIER $@25 args_part2

    IDENTIFIER  shift, and go to state 91


State 84

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 92


State 85

   97 arguments: args_part1 •

    $default  reduce using rule 97 (arguments)


State 86

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 93


State 87

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 94


State 88

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments • ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL

    ST_RPAR  shift, and go to state 95


State 89

   38 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@10 • ST_RPAR

    ST_RPAR  shift, and go to state 96


State 90

   42 fun_args_part1: expression $@11 • fun_args_part2

    ST_COMMA  shift, and go to state 97

    $default  reduce using rule 44 (fun_args_part2)

    fun_args_part2  go to state 98


State 91

  100 args_part1: type IDENTIFIER • $@25 args_part2

    $default  reduce using rule 99 ($@25)

    $@25  go to state 99


State 92

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 100


State 93

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 101


State 94

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 102


State 95

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR • ST_LCURL $@5 stmts $@6 ST_RCURL

    ST_LCURL  shift, and go to state 103


State 96

   38 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@10 ST_RPAR •

    $default  reduce using rule 38 (stmt_call_function)


State 97

   43 fun_args_part2: ST_COMMA • fun_args_part1

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    fun_args_part1      go to state 104
    expression          go to state 67


State 98

   42 fun_args_part1: expression $@11 fun_args_part2 •

    $default  reduce using rule 42 (fun_args_part1)


State 99

  100 args_part1: type IDENTIFIER $@25 • args_part2

    ST_COMMA  shift, and go to state 105

    $default  reduce using rule 102 (args_part2)

    args_part2  go to state 106


State 100

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    ST_DOLLAR  reduce using rule 29 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 112
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 101

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    ST_DOLLAR  reduce using rule 29 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 122
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 102

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    ST_DOLLAR  reduce using rule 29 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 123
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 103

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL • $@5 stmts $@6 ST_RCURL

    $default  reduce using rule 14 ($@5)

    $@5  go to state 124


State 104

   43 fun_args_part2: ST_COMMA fun_args_part1 •

    $default  reduce using rule 43 (fun_args_part2)


State 105

  101 args_part2: ST_COMMA • args_part1

    KW_INT   shift, and go to state 4
    KW_CHAR  shift, and go to state 5

    type        go to state 83
    args_part1  go to state 125


State 106

  100 args_part1: type IDENTIFIER $@25 args_part2 •

    $default  reduce using rule 100 (args_part1)


State 107

   51 stmt_if: KW_IF • $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    $default  reduce using rule 47 ($@12)

    $@12  go to state 126


State 108

   46 stmt_return: KW_RETURN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 127


State 109

   62 stmt_for: KW_FOR • ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_LPAR  shift, and go to state 128


State 110

   67 stmt_while: KW_WHILE • ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_LPAR  shift, and go to state 129


State 111

   38 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments $@10 ST_RPAR
   45 stmt_assignment: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 130
    ST_LPAR    shift, and go to state 42


State 112

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 131


State 113

   20 stmts: stmt • $@8 stmts

    $default  reduce using rule 19 ($@8)

    $@8  go to state 132


State 114

   30 stmt: $@9 • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 133


State 115

   22 stmt: stmt_declare •

    $default  reduce using rule 22 (stmt)


State 116

   27 stmt: stmt_call_function •

    $default  reduce using rule 27 (stmt)


State 117

   23 stmt: stmt_assignment •

    $default  reduce using rule 23 (stmt)


State 118

   25 stmt: stmt_return •

    $default  reduce using rule 25 (stmt)


State 119

   24 stmt: stmt_if •

    $default  reduce using rule 24 (stmt)


State 120

   28 stmt: stmt_for •

    $default  reduce using rule 28 (stmt)


State 121

   26 stmt: stmt_while •

    $default  reduce using rule 26 (stmt)


State 122

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 134


State 123

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 135


State 124

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 • stmts $@6 ST_RCURL

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    ST_DOLLAR  reduce using rule 29 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 136
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 125

  101 args_part2: ST_COMMA args_part1 •

    $default  reduce using rule 101 (args_part2)


State 126

   51 stmt_if: KW_IF $@12 • ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    ST_LPAR  shift, and go to state 137


State 127

   46 stmt_return: KW_RETURN expression • ST_DOLLAR
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 138


State 128

   62 stmt_for: KW_FOR ST_LPAR • $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 60 ($@20)

    $@20  go to state 139


State 129

   67 stmt_while: KW_WHILE ST_LPAR • $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 65 ($@22)

    $@22  go to state 140


State 130

   45 stmt_assignment: IDENTIFIER OP_ASSIGN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 141


State 131

   12 main: KW_VOID KW_MAIN ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 12 (main)


State 132

   20 stmts: stmt $@8 • stmts

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    KW_IF       [reduce using rule 21 (stmts)]
    KW_RETURN   [reduce using rule 21 (stmts)]
    KW_INT      [reduce using rule 21 (stmts)]
    KW_FOR      [reduce using rule 21 (stmts)]
    KW_CHAR     [reduce using rule 21 (stmts)]
    KW_WHILE    [reduce using rule 21 (stmts)]
    ST_DOLLAR   reduce using rule 21 (stmts)
    ST_DOLLAR   [reduce using rule 29 ($@9)]
    IDENTIFIER  [reduce using rule 21 (stmts)]
    $default    reduce using rule 21 (stmts)

    stmts               go to state 142
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 133

   30 stmt: $@9 ST_DOLLAR •

    $default  reduce using rule 30 (stmt)


State 134

   18 function: KW_VOID IDENTIFIER ST_LPAR $@7 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 18 (function)


State 135

   10 main: KW_INT KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 10 (main)


State 136

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts • $@6 ST_RCURL

    $default  reduce using rule 15 ($@6)

    $@6  go to state 143


State 137

   51 stmt_if: KW_IF $@12 ST_LPAR • $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    $default  reduce using rule 48 ($@13)

    $@13  go to state 144


State 138

   46 stmt_return: KW_RETURN expression ST_DOLLAR •

    $default  reduce using rule 46 (stmt_return)


State 139

   62 stmt_for: KW_FOR ST_LPAR $@20 • stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    KW_INT      shift, and go to state 4
    KW_CHAR     shift, and go to state 5
    IDENTIFIER  shift, and go to state 145

    type                     go to state 7
    stmt_declare             go to state 146
    stmt_assignment          go to state 147
    stmt_for_assign_declare  go to state 148


State 140

   67 stmt_while: KW_WHILE ST_LPAR $@22 • expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 149


State 141

   45 stmt_assignment: IDENTIFIER OP_ASSIGN expression • ST_DOLLAR
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 150


State 142

   20 stmts: stmt $@8 stmts •

    $default  reduce using rule 20 (stmts)


State 143

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 • ST_RCURL

    ST_RCURL  shift, and go to state 151


State 144

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 • expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 152


State 145

   45 stmt_assignment: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 130


State 146

   64 stmt_for_assign_declare: stmt_declare •

    $default  reduce using rule 64 (stmt_for_assign_declare)


State 147

   63 stmt_for_assign_declare: stmt_assignment •

    $default  reduce using rule 63 (stmt_for_assign_declare)


State 148

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare • expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 153


State 149

   67 stmt_while: KW_WHILE ST_LPAR $@22 expression • $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57

    $default  reduce using rule 66 ($@23)

    $@23  go to state 154


State 150

   45 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR •

    $default  reduce using rule 45 (stmt_assignment)


State 151

   16 function: KW_INT IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL $@5 stmts $@6 ST_RCURL •

    $default  reduce using rule 16 (function)


State 152

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression • ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_RPAR           shift, and go to state 155


State 153

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression • ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_DOLLAR         shift, and go to state 156


State 154

   67 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 • ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_RPAR  shift, and go to state 157


State 155

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR • $@14 ST_LCURL stmts ST_RCURL $@15 elseif

    $default  reduce using rule 49 ($@14)

    $@14  go to state 158


State 156

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR • $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 61 ($@21)

    $@21  go to state 159


State 157

   67 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR • ST_LCURL loop_stmts ST_RCURL

    ST_LCURL  shift, and go to state 160


State 158

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 • ST_LCURL stmts ST_RCURL $@15 elseif

    ST_LCURL  shift, and go to state 161


State 159

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 • stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    KW_INT      shift, and go to state 4
    KW_CHAR     shift, and go to state 5
    IDENTIFIER  shift, and go to state 145

    type                     go to state 7
    stmt_declare             go to state 146
    stmt_assignment          go to state 147
    stmt_for_assign_declare  go to state 162


State 160

   67 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL • loop_stmts ST_RCURL

    $default  reduce using rule 72 (loop_stmts)

    loop_stmts  go to state 163


State 161

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL • stmts ST_RCURL $@15 elseif

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    ST_DOLLAR  reduce using rule 29 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 164
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 162

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare • ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_RPAR  shift, and go to state 165


State 163

   67 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts • ST_RCURL
   68 loop_stmts: loop_stmts • stmts
   70           | loop_stmts • KW_BREAK $@24 ST_DOLLAR
   71           | loop_stmts • KW_CONTINUE ST_DOLLAR

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 166
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 110
    KW_CONTINUE  shift, and go to state 167
    ST_RCURL     shift, and go to state 168
    IDENTIFIER   shift, and go to state 111

    KW_IF        [reduce using rule 21 (stmts)]
    KW_RETURN    [reduce using rule 21 (stmts)]
    KW_INT       [reduce using rule 21 (stmts)]
    KW_FOR       [reduce using rule 21 (stmts)]
    KW_BREAK     [reduce using rule 21 (stmts)]
    KW_CHAR      [reduce using rule 21 (stmts)]
    KW_WHILE     [reduce using rule 21 (stmts)]
    KW_CONTINUE  [reduce using rule 21 (stmts)]
    ST_RCURL     [reduce using rule 21 (stmts)]
    ST_DOLLAR    reduce using rule 21 (stmts)
    ST_DOLLAR    [reduce using rule 29 ($@9)]
    IDENTIFIER   [reduce using rule 21 (stmts)]
    $default     reduce using rule 21 (stmts)

    stmts               go to state 169
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 164

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts • ST_RCURL $@15 elseif

    ST_RCURL  shift, and go to state 170


State 165

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR • ST_LCURL loop_stmts ST_RCURL

    ST_LCURL  shift, and go to state 171


State 166

   70 loop_stmts: loop_stmts KW_BREAK • $@24 ST_DOLLAR

    $default  reduce using rule 69 ($@24)

    $@24  go to state 172


State 167

   71 loop_stmts: loop_stmts KW_CONTINUE • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 173


State 168

   67 stmt_while: KW_WHILE ST_LPAR $@22 expression $@23 ST_RPAR ST_LCURL loop_stmts ST_RCURL •

    $default  reduce using rule 67 (stmt_while)


State 169

   68 loop_stmts: loop_stmts stmts •

    $default  reduce using rule 68 (loop_stmts)


State 170

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL • $@15 elseif

    $default  reduce using rule 50 ($@15)

    $@15  go to state 174


State 171

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL • loop_stmts ST_RCURL

    $default  reduce using rule 72 (loop_stmts)

    loop_stmts  go to state 175


State 172

   70 loop_stmts: loop_stmts KW_BREAK $@24 • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 176


State 173

   71 loop_stmts: loop_stmts KW_CONTINUE ST_DOLLAR •

    $default  reduce using rule 71 (loop_stmts)


State 174

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 • elseif

    KW_ELSE    shift, and go to state 177
    KW_ELSEIF  shift, and go to state 178

    $default  reduce using rule 59 (else)

    elseif  go to state 179
    else    go to state 180


State 175

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts • ST_RCURL
   68 loop_stmts: loop_stmts • stmts
   70           | loop_stmts • KW_BREAK $@24 ST_DOLLAR
   71           | loop_stmts • KW_CONTINUE ST_DOLLAR

    KW_IF        shift, and go to state 107
    KW_RETURN    shift, and go to state 108
    KW_INT       shift, and go to state 4
    KW_FOR       shift, and go to state 109
    KW_BREAK     shift, and go to state 166
    KW_CHAR      shift, and go to state 5
    KW_WHILE     shift, and go to state 110
    KW_CONTINUE  shift, and go to state 167
    ST_RCURL     shift, and go to state 181
    IDENTIFIER   shift, and go to state 111

    KW_IF        [reduce using rule 21 (stmts)]
    KW_RETURN    [reduce using rule 21 (stmts)]
    KW_INT       [reduce using rule 21 (stmts)]
    KW_FOR       [reduce using rule 21 (stmts)]
    KW_BREAK     [reduce using rule 21 (stmts)]
    KW_CHAR      [reduce using rule 21 (stmts)]
    KW_WHILE     [reduce using rule 21 (stmts)]
    KW_CONTINUE  [reduce using rule 21 (stmts)]
    ST_RCURL     [reduce using rule 21 (stmts)]
    ST_DOLLAR    reduce using rule 21 (stmts)
    ST_DOLLAR    [reduce using rule 29 ($@9)]
    IDENTIFIER   [reduce using rule 21 (stmts)]
    $default     reduce using rule 21 (stmts)

    stmts               go to state 169
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 176

   70 loop_stmts: loop_stmts KW_BREAK $@24 ST_DOLLAR •

    $default  reduce using rule 70 (loop_stmts)


State 177

   58 else: KW_ELSE • ST_LCURL $@19 stmts ST_RCURL

    ST_LCURL  shift, and go to state 182


State 178

   55 elseif: KW_ELSEIF • ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    ST_LPAR  shift, and go to state 183


State 179

   51 stmt_if: KW_IF $@12 ST_LPAR $@13 expression ST_RPAR $@14 ST_LCURL stmts ST_RCURL $@15 elseif •

    $default  reduce using rule 51 (stmt_if)


State 180

   56 elseif: else •

    $default  reduce using rule 56 (elseif)


State 181

   62 stmt_for: KW_FOR ST_LPAR $@20 stmt_for_assign_declare expression ST_DOLLAR $@21 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL •

    $default  reduce using rule 62 (stmt_for)


State 182

   58 else: KW_ELSE ST_LCURL • $@19 stmts ST_RCURL

    $default  reduce using rule 57 ($@19)

    $@19  go to state 184


State 183

   55 elseif: KW_ELSEIF ST_LPAR • $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    $default  reduce using rule 52 ($@16)

    $@16  go to state 185


State 184

   58 else: KW_ELSE ST_LCURL $@19 • stmts ST_RCURL

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    ST_DOLLAR  reduce using rule 29 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 186
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 185

   55 elseif: KW_ELSEIF ST_LPAR $@16 • expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    OP_MINUS        shift, and go to state 24
    OP_LOGICAL_NOT  shift, and go to state 25
    ST_LPAR         shift, and go to state 26
    LCHAR           shift, and go to state 27
    UCHAR           shift, and go to state 28
    NCHAR           shift, and go to state 29
    IDENTIFIER      shift, and go to state 30
    NUMBER          shift, and go to state 31

    stmt_call_function  go to state 32
    expression          go to state 187


State 186

   58 else: KW_ELSE ST_LCURL $@19 stmts • ST_RCURL

    ST_RCURL  shift, and go to state 188


State 187

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression • ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif
   73 expression: expression • OP_PLUS expression
   74           | expression • OP_MINUS expression
   75           | expression • OP_MULTIPLY expression
   76           | expression • OP_DIVIDE expression
   77           | expression • OP_LESS expression
   78           | expression • OP_LESS_EQUAL expression
   79           | expression • OP_EQUAL expression
   80           | expression • OP_NOT_EQUAL expression
   81           | expression • OP_GREATER expression
   82           | expression • OP_GREATER_EQUAL expression
   83           | expression • OP_LOGICAL_OR expression
   84           | expression • OP_LOGICAL_AND expression
   85           | expression • OP_BITWISE_OR expression
   86           | expression • OP_BITWISE_AND expression
   87           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_MULTIPLY       shift, and go to state 45
    OP_DIVIDE         shift, and go to state 46
    OP_LESS           shift, and go to state 47
    OP_LESS_EQUAL     shift, and go to state 48
    OP_EQUAL          shift, and go to state 49
    OP_NOT_EQUAL      shift, and go to state 50
    OP_GREATER        shift, and go to state 51
    OP_GREATER_EQUAL  shift, and go to state 52
    OP_BITWISE_OR     shift, and go to state 53
    OP_BITWISE_AND    shift, and go to state 54
    OP_BITWISE_XOR    shift, and go to state 55
    OP_LOGICAL_OR     shift, and go to state 56
    OP_LOGICAL_AND    shift, and go to state 57
    ST_RPAR           shift, and go to state 189


State 188

   58 else: KW_ELSE ST_LCURL $@19 stmts ST_RCURL •

    $default  reduce using rule 58 (else)


State 189

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR • $@17 ST_LCURL stmts ST_RCURL $@18 elseif

    $default  reduce using rule 53 ($@17)

    $@17  go to state 190


State 190

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 • ST_LCURL stmts ST_RCURL $@18 elseif

    ST_LCURL  shift, and go to state 191


State 191

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL • stmts ST_RCURL $@18 elseif

    KW_IF       shift, and go to state 107
    KW_RETURN   shift, and go to state 108
    KW_INT      shift, and go to state 4
    KW_FOR      shift, and go to state 109
    KW_CHAR     shift, and go to state 5
    KW_WHILE    shift, and go to state 110
    IDENTIFIER  shift, and go to state 111

    ST_DOLLAR  reduce using rule 29 ($@9)
    $default   reduce using rule 21 (stmts)

    stmts               go to state 192
    stmt                go to state 113
    $@9                 go to state 114
    type                go to state 7
    stmt_declare        go to state 115
    stmt_call_function  go to state 116
    stmt_assignment     go to state 117
    stmt_return         go to state 118
    stmt_if             go to state 119
    stmt_for            go to state 120
    stmt_while          go to state 121


State 192

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts • ST_RCURL $@18 elseif

    ST_RCURL  shift, and go to state 193


State 193

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL • $@18 elseif

    $default  reduce using rule 54 ($@18)

    $@18  go to state 194


State 194

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 • elseif

    KW_ELSE    shift, and go to state 177
    KW_ELSEIF  shift, and go to state 178

    $default  reduce using rule 59 (else)

    elseif  go to state 195
    else    go to state 180


State 195

   55 elseif: KW_ELSEIF ST_LPAR $@16 expression ST_RPAR $@17 ST_LCURL stmts ST_RCURL $@18 elseif •

    $default  reduce using rule 55 (elseif)

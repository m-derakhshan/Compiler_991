Terminals unused in grammar

    NEW_LINE
    OTHER
    ST_LBR
    ST_RBR
    ST_SEMICOLON


State 76 conflicts: 7 shift/reduce, 1 reduce/reduce
State 159 conflicts: 10 shift/reduce, 1 reduce/reduce
State 171 conflicts: 10 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: functions main

    2 functions: functions function
    3          | %empty

    4 $@1: %empty

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    6 $@2: %empty

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    8 $@3: %empty

    9 $@4: %empty

   10 $@5: %empty

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL $@4 stmts $@5 ST_RCURL

   12 $@6: %empty

   13 function: KW_VOID IDENTIFIER ST_LPAR $@6 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   14 $@7: %empty

   15 stmts: stmt $@7 stmts
   16      | %empty

   17 stmt: stmt_declare
   18     | stmt_assignment
   19     | stmt_if
   20     | stmt_return
   21     | stmt_while
   22     | stmt_call_function
   23     | stmt_for

   24 $@8: %empty

   25 stmt: $@8 ST_DOLLAR

   26 type: KW_INT
   27     | KW_CHAR

   28 stmt_declare: type IDENTIFIER ids

   29 ids: ST_DOLLAR
   30    | ST_COMMA IDENTIFIER ids
   31    | OP_ASSIGN expression ids

   32 $@9: %empty

   33 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@9 ST_RPAR

   34 fun_arguments: fun_args_part1
   35              | %empty

   36 $@10: %empty

   37 fun_args_part1: expression $@10 fun_args_part2

   38 fun_args_part2: ST_COMMA fun_args_part1
   39               | %empty

   40 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR

   41 stmt_return: KW_RETURN expression ST_DOLLAR

   42 $@11: %empty

   43 $@12: %empty

   44 $@13: %empty

   45 $@14: %empty

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 elseif

   47 $@15: %empty

   48 $@16: %empty

   49 $@17: %empty

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR $@16 ST_LCURL stmts ST_RCURL $@17 elseif
   51       | else

   52 $@18: %empty

   53 else: KW_ELSE ST_LCURL $@18 stmts ST_RCURL
   54     | %empty

   55 $@19: %empty

   56 $@20: %empty

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

   58 stmt_for_assign_declare: stmt_assignment
   59                        | stmt_declare

   60 $@21: %empty

   61 $@22: %empty

   62 stmt_while: KW_WHILE ST_LPAR $@21 expression $@22 ST_RPAR ST_LCURL loop_stmts ST_RCURL

   63 loop_stmts: loop_stmts stmts

   64 $@23: %empty

   65 loop_stmts: loop_stmts KW_BREAK $@23 ST_DOLLAR
   66           | loop_stmts KW_CONTINUE ST_DOLLAR
   67           | %empty

   68 expression: expression OP_PLUS expression
   69           | expression OP_MINUS expression
   70           | expression OP_MULTIPLY expression
   71           | expression OP_DIVIDE expression
   72           | expression OP_LESS expression
   73           | expression OP_LESS_EQUAL expression
   74           | expression OP_EQUAL expression
   75           | expression OP_NOT_EQUAL expression
   76           | expression OP_GREATER expression
   77           | expression OP_GREATER_EQUAL expression
   78           | expression OP_LOGICAL_OR expression
   79           | expression OP_LOGICAL_AND expression
   80           | expression OP_BITWISE_OR expression
   81           | expression OP_BITWISE_AND expression
   82           | expression OP_BITWISE_XOR expression
   83           | OP_LOGICAL_NOT expression
   84           | OP_MINUS expression
   85           | ST_LPAR expression ST_RPAR
   86           | IDENTIFIER
   87           | NUMBER
   88           | NCHAR
   89           | UCHAR
   90           | LCHAR
   91           | stmt_call_function

   92 arguments: args_part1
   93          | %empty

   94 $@24: %empty

   95 args_part1: type IDENTIFIER $@24 args_part2

   96 args_part2: ST_COMMA args_part1
   97           | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_VOID (258) 7 13
    KW_IF (259) 46
    KW_RETURN (260) 41
    KW_INT (261) 5 11 26
    KW_ELSE (262) 53
    KW_MAIN (263) 5 7
    KW_FOR (264) 57
    KW_BREAK (265) 65
    KW_CHAR (266) 27
    KW_WHILE (267) 62
    KW_CONTINUE (268) 66
    KW_ELSEIF (269) 50
    NEW_LINE (270)
    OTHER (271)
    OP_ASSIGN (272) 31 40
    OP_PLUS (273) 68
    OP_MINUS (274) 69 84
    OP_MULTIPLY (275) 70
    OP_DIVIDE (276) 71
    OP_LESS (277) 72
    OP_LESS_EQUAL (278) 73
    OP_EQUAL (279) 74
    OP_NOT_EQUAL (280) 75
    OP_GREATER (281) 76
    OP_GREATER_EQUAL (282) 77
    OP_BITWISE_OR (283) 80
    OP_BITWISE_AND (284) 81
    OP_BITWISE_XOR (285) 82
    OP_LOGICAL_OR (286) 78
    OP_LOGICAL_AND (287) 79
    OP_LOGICAL_NOT (288) 83
    ST_LPAR (289) 5 7 11 13 33 46 50 57 62 85
    ST_RPAR (290) 5 7 11 13 33 46 50 57 62 85
    ST_LCURL (291) 5 7 11 13 46 50 53 57 62
    ST_RCURL (292) 5 7 11 13 46 50 53 57 62
    ST_LBR (293)
    ST_RBR (294)
    ST_DOLLAR (295) 25 29 40 41 57 65 66
    ST_COMMA (296) 30 38 96
    ST_SEMICOLON (297)
    LCHAR <charVal> (298) 90
    UCHAR <charVal> (299) 89
    NCHAR <charVal> (300) 88
    IDENTIFIER <stringVal> (301) 11 13 28 30 33 40 86 95
    NUMBER <intVal> (302) 87


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1
        on right: 0
    functions (50)
        on left: 2 3
        on right: 1 2
    main (51)
        on left: 5 7
        on right: 1
    $@1 (52)
        on left: 4
        on right: 5
    $@2 (53)
        on left: 6
        on right: 7
    function <intVal> (54)
        on left: 11 13
        on right: 2
    $@3 (55)
        on left: 8
        on right: 11
    $@4 (56)
        on left: 9
        on right: 11
    $@5 (57)
        on left: 10
        on right: 11
    $@6 (58)
        on left: 12
        on right: 13
    stmts (59)
        on left: 15 16
        on right: 5 7 11 13 15 46 50 53 63
    $@7 (60)
        on left: 14
        on right: 15
    stmt (61)
        on left: 17 18 19 20 21 22 23 25
        on right: 15
    $@8 (62)
        on left: 24
        on right: 25
    type (63)
        on left: 26 27
        on right: 28 95
    stmt_declare (64)
        on left: 28
        on right: 17 59
    ids <intVal> (65)
        on left: 29 30 31
        on right: 28 30 31
    stmt_call_function <intVal> (66)
        on left: 33
        on right: 22 91
    $@9 (67)
        on left: 32
        on right: 33
    fun_arguments (68)
        on left: 34 35
        on right: 33
    fun_args_part1 (69)
        on left: 37
        on right: 34 38
    $@10 (70)
        on left: 36
        on right: 37
    fun_args_part2 (71)
        on left: 38 39
        on right: 37
    stmt_assignment (72)
        on left: 40
        on right: 18 58
    stmt_return (73)
        on left: 41
        on right: 20
    stmt_if (74)
        on left: 46
        on right: 19
    $@11 (75)
        on left: 42
        on right: 46
    $@12 (76)
        on left: 43
        on right: 46
    $@13 (77)
        on left: 44
        on right: 46
    $@14 (78)
        on left: 45
        on right: 46
    elseif (79)
        on left: 50 51
        on right: 46 50
    $@15 (80)
        on left: 47
        on right: 50
    $@16 (81)
        on left: 48
        on right: 50
    $@17 (82)
        on left: 49
        on right: 50
    else (83)
        on left: 53 54
        on right: 51
    $@18 (84)
        on left: 52
        on right: 53
    stmt_for (85)
        on left: 57
        on right: 23
    $@19 (86)
        on left: 55
        on right: 57
    $@20 (87)
        on left: 56
        on right: 57
    stmt_for_assign_declare (88)
        on left: 58 59
        on right: 57
    stmt_while (89)
        on left: 62
        on right: 21
    $@21 (90)
        on left: 60
        on right: 62
    $@22 (91)
        on left: 61
        on right: 62
    loop_stmts (92)
        on left: 63 65 66 67
        on right: 57 62 63 65 66
    $@23 (93)
        on left: 64
        on right: 65
    expression <node> (94)
        on left: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
        on right: 31 37 40 41 46 50 57 62 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85
    arguments (95)
        on left: 92 93
        on right: 5 7 11 13
    args_part1 (96)
        on left: 95
        on right: 92 96
    $@24 (97)
        on left: 94
        on right: 95
    args_part2 (98)
        on left: 96 97
        on right: 95


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (functions)

    program    go to state 1
    functions  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: functions • main
    2 functions: functions • function

    KW_VOID  shift, and go to state 4
    KW_INT   shift, and go to state 5

    main      go to state 6
    function  go to state 7


State 3

    0 $accept: program $end •

    $default  accept


State 4

    7 main: KW_VOID • KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL
   13 function: KW_VOID • IDENTIFIER ST_LPAR $@6 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_MAIN     shift, and go to state 8
    IDENTIFIER  shift, and go to state 9


State 5

    5 main: KW_INT • KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL
   11 function: KW_INT • IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL $@4 stmts $@5 ST_RCURL

    KW_MAIN     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11


State 6

    1 program: functions main •

    $default  reduce using rule 1 (program)


State 7

    2 functions: functions function •

    $default  reduce using rule 2 (functions)


State 8

    7 main: KW_VOID KW_MAIN • ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 12


State 9

   13 function: KW_VOID IDENTIFIER • ST_LPAR $@6 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 13


State 10

    5 main: KW_INT KW_MAIN • ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 14


State 11

   11 function: KW_INT IDENTIFIER • ST_LPAR $@3 arguments ST_RPAR ST_LCURL $@4 stmts $@5 ST_RCURL

    ST_LPAR  shift, and go to state 15


State 12

    7 main: KW_VOID KW_MAIN ST_LPAR • $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 6 ($@2)

    $@2  go to state 16


State 13

   13 function: KW_VOID IDENTIFIER ST_LPAR • $@6 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 12 ($@6)

    $@6  go to state 17


State 14

    5 main: KW_INT KW_MAIN ST_LPAR • $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 4 ($@1)

    $@1  go to state 18


State 15

   11 function: KW_INT IDENTIFIER ST_LPAR • $@3 arguments ST_RPAR ST_LCURL $@4 stmts $@5 ST_RCURL

    $default  reduce using rule 8 ($@3)

    $@3  go to state 19


State 16

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 93 (arguments)

    type        go to state 22
    arguments   go to state 23
    args_part1  go to state 24


State 17

   13 function: KW_VOID IDENTIFIER ST_LPAR $@6 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 93 (arguments)

    type        go to state 22
    arguments   go to state 25
    args_part1  go to state 24


State 18

    5 main: KW_INT KW_MAIN ST_LPAR $@1 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 93 (arguments)

    type        go to state 22
    arguments   go to state 26
    args_part1  go to state 24


State 19

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 • arguments ST_RPAR ST_LCURL $@4 stmts $@5 ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 93 (arguments)

    type        go to state 22
    arguments   go to state 27
    args_part1  go to state 24


State 20

   26 type: KW_INT •

    $default  reduce using rule 26 (type)


State 21

   27 type: KW_CHAR •

    $default  reduce using rule 27 (type)


State 22

   95 args_part1: type • IDENTIFIER $@24 args_part2

    IDENTIFIER  shift, and go to state 28


State 23

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 29


State 24

   92 arguments: args_part1 •

    $default  reduce using rule 92 (arguments)


State 25

   13 function: KW_VOID IDENTIFIER ST_LPAR $@6 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 30


State 26

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 31


State 27

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments • ST_RPAR ST_LCURL $@4 stmts $@5 ST_RCURL

    ST_RPAR  shift, and go to state 32


State 28

   95 args_part1: type IDENTIFIER • $@24 args_part2

    $default  reduce using rule 94 ($@24)

    $@24  go to state 33


State 29

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 34


State 30

   13 function: KW_VOID IDENTIFIER ST_LPAR $@6 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 35


State 31

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 36


State 32

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR • ST_LCURL $@4 stmts $@5 ST_RCURL

    ST_LCURL  shift, and go to state 37


State 33

   95 args_part1: type IDENTIFIER $@24 • args_part2

    ST_COMMA  shift, and go to state 38

    $default  reduce using rule 97 (args_part2)

    args_part2  go to state 39


State 34

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    ST_DOLLAR  reduce using rule 24 ($@8)
    $default   reduce using rule 16 (stmts)

    stmts               go to state 45
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 35

   13 function: KW_VOID IDENTIFIER ST_LPAR $@6 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    ST_DOLLAR  reduce using rule 24 ($@8)
    $default   reduce using rule 16 (stmts)

    stmts               go to state 56
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 36

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    ST_DOLLAR  reduce using rule 24 ($@8)
    $default   reduce using rule 16 (stmts)

    stmts               go to state 57
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 37

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL • $@4 stmts $@5 ST_RCURL

    $default  reduce using rule 9 ($@4)

    $@4  go to state 58


State 38

   96 args_part2: ST_COMMA • args_part1

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    type        go to state 22
    args_part1  go to state 59


State 39

   95 args_part1: type IDENTIFIER $@24 args_part2 •

    $default  reduce using rule 95 (args_part1)


State 40

   46 stmt_if: KW_IF • $@11 ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 elseif

    $default  reduce using rule 42 ($@11)

    $@11  go to state 60


State 41

   41 stmt_return: KW_RETURN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 70


State 42

   57 stmt_for: KW_FOR • ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_LPAR  shift, and go to state 71


State 43

   62 stmt_while: KW_WHILE • ST_LPAR $@21 expression $@22 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_LPAR  shift, and go to state 72


State 44

   33 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments $@9 ST_RPAR
   40 stmt_assignment: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 73
    ST_LPAR    shift, and go to state 74


State 45

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 75


State 46

   15 stmts: stmt • $@7 stmts

    $default  reduce using rule 14 ($@7)

    $@7  go to state 76


State 47

   25 stmt: $@8 • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 77


State 48

   28 stmt_declare: type • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 78


State 49

   17 stmt: stmt_declare •

    $default  reduce using rule 17 (stmt)


State 50

   22 stmt: stmt_call_function •

    $default  reduce using rule 22 (stmt)


State 51

   18 stmt: stmt_assignment •

    $default  reduce using rule 18 (stmt)


State 52

   20 stmt: stmt_return •

    $default  reduce using rule 20 (stmt)


State 53

   19 stmt: stmt_if •

    $default  reduce using rule 19 (stmt)


State 54

   23 stmt: stmt_for •

    $default  reduce using rule 23 (stmt)


State 55

   21 stmt: stmt_while •

    $default  reduce using rule 21 (stmt)


State 56

   13 function: KW_VOID IDENTIFIER ST_LPAR $@6 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 79


State 57

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 80


State 58

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL $@4 • stmts $@5 ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    ST_DOLLAR  reduce using rule 24 ($@8)
    $default   reduce using rule 16 (stmts)

    stmts               go to state 81
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 59

   96 args_part2: ST_COMMA args_part1 •

    $default  reduce using rule 96 (args_part2)


State 60

   46 stmt_if: KW_IF $@11 • ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 elseif

    ST_LPAR  shift, and go to state 82


State 61

   84 expression: OP_MINUS • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 83


State 62

   83 expression: OP_LOGICAL_NOT • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 84


State 63

   85 expression: ST_LPAR • expression ST_RPAR

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 85


State 64

   90 expression: LCHAR •

    $default  reduce using rule 90 (expression)


State 65

   89 expression: UCHAR •

    $default  reduce using rule 89 (expression)


State 66

   88 expression: NCHAR •

    $default  reduce using rule 88 (expression)


State 67

   33 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments $@9 ST_RPAR
   86 expression: IDENTIFIER •

    ST_LPAR  shift, and go to state 74

    $default  reduce using rule 86 (expression)


State 68

   87 expression: NUMBER •

    $default  reduce using rule 87 (expression)


State 69

   91 expression: stmt_call_function •

    $default  reduce using rule 91 (expression)


State 70

   41 stmt_return: KW_RETURN expression • ST_DOLLAR
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100
    ST_DOLLAR         shift, and go to state 101


State 71

   57 stmt_for: KW_FOR ST_LPAR • $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 55 ($@19)

    $@19  go to state 102


State 72

   62 stmt_while: KW_WHILE ST_LPAR • $@21 expression $@22 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 60 ($@21)

    $@21  go to state 103


State 73

   40 stmt_assignment: IDENTIFIER OP_ASSIGN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 104


State 74

   33 stmt_call_function: IDENTIFIER ST_LPAR • fun_arguments $@9 ST_RPAR

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    $default  reduce using rule 35 (fun_arguments)

    stmt_call_function  go to state 69
    fun_arguments       go to state 105
    fun_args_part1      go to state 106
    expression          go to state 107


State 75

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 7 (main)


State 76

   15 stmts: stmt $@7 • stmts

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    KW_IF       [reduce using rule 16 (stmts)]
    KW_RETURN   [reduce using rule 16 (stmts)]
    KW_INT      [reduce using rule 16 (stmts)]
    KW_FOR      [reduce using rule 16 (stmts)]
    KW_CHAR     [reduce using rule 16 (stmts)]
    KW_WHILE    [reduce using rule 16 (stmts)]
    ST_DOLLAR   reduce using rule 16 (stmts)
    ST_DOLLAR   [reduce using rule 24 ($@8)]
    IDENTIFIER  [reduce using rule 16 (stmts)]
    $default    reduce using rule 16 (stmts)

    stmts               go to state 108
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 77

   25 stmt: $@8 ST_DOLLAR •

    $default  reduce using rule 25 (stmt)


State 78

   28 stmt_declare: type IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 109
    ST_DOLLAR  shift, and go to state 110
    ST_COMMA   shift, and go to state 111

    ids  go to state 112


State 79

   13 function: KW_VOID IDENTIFIER ST_LPAR $@6 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 13 (function)


State 80

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 5 (main)


State 81

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL $@4 stmts • $@5 ST_RCURL

    $default  reduce using rule 10 ($@5)

    $@5  go to state 113


State 82

   46 stmt_if: KW_IF $@11 ST_LPAR • $@12 expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 elseif

    $default  reduce using rule 43 ($@12)

    $@12  go to state 114


State 83

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression
   84           | OP_MINUS expression •

    OP_MULTIPLY  shift, and go to state 88
    OP_DIVIDE    shift, and go to state 89

    $default  reduce using rule 84 (expression)


State 84

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression
   83           | OP_LOGICAL_NOT expression •

    $default  reduce using rule 83 (expression)


State 85

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression
   85           | ST_LPAR expression • ST_RPAR

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100
    ST_RPAR           shift, and go to state 115


State 86

   68 expression: expression OP_PLUS • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 116


State 87

   69 expression: expression OP_MINUS • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 117


State 88

   70 expression: expression OP_MULTIPLY • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 118


State 89

   71 expression: expression OP_DIVIDE • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 119


State 90

   72 expression: expression OP_LESS • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 120


State 91

   73 expression: expression OP_LESS_EQUAL • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 121


State 92

   74 expression: expression OP_EQUAL • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 122


State 93

   75 expression: expression OP_NOT_EQUAL • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 123


State 94

   76 expression: expression OP_GREATER • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 124


State 95

   77 expression: expression OP_GREATER_EQUAL • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 125


State 96

   80 expression: expression OP_BITWISE_OR • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 126


State 97

   81 expression: expression OP_BITWISE_AND • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 127


State 98

   82 expression: expression OP_BITWISE_XOR • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 128


State 99

   78 expression: expression OP_LOGICAL_OR • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 129


State 100

   79 expression: expression OP_LOGICAL_AND • expression

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 130


State 101

   41 stmt_return: KW_RETURN expression ST_DOLLAR •

    $default  reduce using rule 41 (stmt_return)


State 102

   57 stmt_for: KW_FOR ST_LPAR $@19 • stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 131

    type                     go to state 48
    stmt_declare             go to state 132
    stmt_assignment          go to state 133
    stmt_for_assign_declare  go to state 134


State 103

   62 stmt_while: KW_WHILE ST_LPAR $@21 • expression $@22 ST_RPAR ST_LCURL loop_stmts ST_RCURL

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 135


State 104

   40 stmt_assignment: IDENTIFIER OP_ASSIGN expression • ST_DOLLAR
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100
    ST_DOLLAR         shift, and go to state 136


State 105

   33 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments • $@9 ST_RPAR

    $default  reduce using rule 32 ($@9)

    $@9  go to state 137


State 106

   34 fun_arguments: fun_args_part1 •

    $default  reduce using rule 34 (fun_arguments)


State 107

   37 fun_args_part1: expression • $@10 fun_args_part2
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100

    $default  reduce using rule 36 ($@10)

    $@10  go to state 138


State 108

   15 stmts: stmt $@7 stmts •

    $default  reduce using rule 15 (stmts)


State 109

   31 ids: OP_ASSIGN • expression ids

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 139


State 110

   29 ids: ST_DOLLAR •

    $default  reduce using rule 29 (ids)


State 111

   30 ids: ST_COMMA • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 140


State 112

   28 stmt_declare: type IDENTIFIER ids •

    $default  reduce using rule 28 (stmt_declare)


State 113

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL $@4 stmts $@5 • ST_RCURL

    ST_RCURL  shift, and go to state 141


State 114

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 • expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 elseif

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 142


State 115

   85 expression: ST_LPAR expression ST_RPAR •

    $default  reduce using rule 85 (expression)


State 116

   68 expression: expression • OP_PLUS expression
   68           | expression OP_PLUS expression •
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 88
    OP_DIVIDE    shift, and go to state 89

    $default  reduce using rule 68 (expression)


State 117

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   69           | expression OP_MINUS expression •
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 88
    OP_DIVIDE    shift, and go to state 89

    $default  reduce using rule 69 (expression)


State 118

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   70           | expression OP_MULTIPLY expression •
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 70 (expression)


State 119

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   71           | expression OP_DIVIDE expression •
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 71 (expression)


State 120

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   72           | expression OP_LESS expression •
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 86
    OP_MINUS     shift, and go to state 87
    OP_MULTIPLY  shift, and go to state 88
    OP_DIVIDE    shift, and go to state 89

    $default  reduce using rule 72 (expression)


State 121

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   73           | expression OP_LESS_EQUAL expression •
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 86
    OP_MINUS     shift, and go to state 87
    OP_MULTIPLY  shift, and go to state 88
    OP_DIVIDE    shift, and go to state 89

    $default  reduce using rule 73 (expression)


State 122

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   74           | expression OP_EQUAL expression •
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95

    $default  reduce using rule 74 (expression)


State 123

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   75           | expression OP_NOT_EQUAL expression •
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95

    $default  reduce using rule 75 (expression)


State 124

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   76           | expression OP_GREATER expression •
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 86
    OP_MINUS       shift, and go to state 87
    OP_MULTIPLY    shift, and go to state 88
    OP_DIVIDE      shift, and go to state 89
    OP_LESS        shift, and go to state 90
    OP_LESS_EQUAL  shift, and go to state 91

    $default  reduce using rule 76 (expression)


State 125

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   77           | expression OP_GREATER_EQUAL expression •
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 86
    OP_MINUS       shift, and go to state 87
    OP_MULTIPLY    shift, and go to state 88
    OP_DIVIDE      shift, and go to state 89
    OP_LESS        shift, and go to state 90
    OP_LESS_EQUAL  shift, and go to state 91

    $default  reduce using rule 77 (expression)


State 126

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   80           | expression OP_BITWISE_OR expression •
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95

    $default  reduce using rule 80 (expression)


State 127

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   81           | expression OP_BITWISE_AND expression •
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95

    $default  reduce using rule 81 (expression)


State 128

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression
   82           | expression OP_BITWISE_XOR expression •

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95

    $default  reduce using rule 82 (expression)


State 129

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   78           | expression OP_LOGICAL_OR expression •
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98

    $default  reduce using rule 78 (expression)


State 130

   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   79           | expression OP_LOGICAL_AND expression •
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98

    $default  reduce using rule 79 (expression)


State 131

   40 stmt_assignment: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 73


State 132

   59 stmt_for_assign_declare: stmt_declare •

    $default  reduce using rule 59 (stmt_for_assign_declare)


State 133

   58 stmt_for_assign_declare: stmt_assignment •

    $default  reduce using rule 58 (stmt_for_assign_declare)


State 134

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare • expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 143


State 135

   62 stmt_while: KW_WHILE ST_LPAR $@21 expression • $@22 ST_RPAR ST_LCURL loop_stmts ST_RCURL
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100

    $default  reduce using rule 61 ($@22)

    $@22  go to state 144


State 136

   40 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR •

    $default  reduce using rule 40 (stmt_assignment)


State 137

   33 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@9 • ST_RPAR

    ST_RPAR  shift, and go to state 145


State 138

   37 fun_args_part1: expression $@10 • fun_args_part2

    ST_COMMA  shift, and go to state 146

    $default  reduce using rule 39 (fun_args_part2)

    fun_args_part2  go to state 147


State 139

   31 ids: OP_ASSIGN expression • ids
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_ASSIGN         shift, and go to state 109
    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100
    ST_DOLLAR         shift, and go to state 110
    ST_COMMA          shift, and go to state 111

    ids  go to state 148


State 140

   30 ids: ST_COMMA IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 109
    ST_DOLLAR  shift, and go to state 110
    ST_COMMA   shift, and go to state 111

    ids  go to state 149


State 141

   11 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL $@4 stmts $@5 ST_RCURL •

    $default  reduce using rule 11 (function)


State 142

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression • ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 elseif
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100
    ST_RPAR           shift, and go to state 150


State 143

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression • ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100
    ST_DOLLAR         shift, and go to state 151


State 144

   62 stmt_while: KW_WHILE ST_LPAR $@21 expression $@22 • ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_RPAR  shift, and go to state 152


State 145

   33 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments $@9 ST_RPAR •

    $default  reduce using rule 33 (stmt_call_function)


State 146

   38 fun_args_part2: ST_COMMA • fun_args_part1

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    fun_args_part1      go to state 153
    expression          go to state 107


State 147

   37 fun_args_part1: expression $@10 fun_args_part2 •

    $default  reduce using rule 37 (fun_args_part1)


State 148

   31 ids: OP_ASSIGN expression ids •

    $default  reduce using rule 31 (ids)


State 149

   30 ids: ST_COMMA IDENTIFIER ids •

    $default  reduce using rule 30 (ids)


State 150

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR • $@13 ST_LCURL stmts ST_RCURL $@14 elseif

    $default  reduce using rule 44 ($@13)

    $@13  go to state 154


State 151

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR • $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 56 ($@20)

    $@20  go to state 155


State 152

   62 stmt_while: KW_WHILE ST_LPAR $@21 expression $@22 ST_RPAR • ST_LCURL loop_stmts ST_RCURL

    ST_LCURL  shift, and go to state 156


State 153

   38 fun_args_part2: ST_COMMA fun_args_part1 •

    $default  reduce using rule 38 (fun_args_part2)


State 154

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR $@13 • ST_LCURL stmts ST_RCURL $@14 elseif

    ST_LCURL  shift, and go to state 157


State 155

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 • stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL

    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    IDENTIFIER  shift, and go to state 131

    type                     go to state 48
    stmt_declare             go to state 132
    stmt_assignment          go to state 133
    stmt_for_assign_declare  go to state 158


State 156

   62 stmt_while: KW_WHILE ST_LPAR $@21 expression $@22 ST_RPAR ST_LCURL • loop_stmts ST_RCURL

    $default  reduce using rule 67 (loop_stmts)

    loop_stmts  go to state 159


State 157

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL • stmts ST_RCURL $@14 elseif

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    ST_DOLLAR  reduce using rule 24 ($@8)
    $default   reduce using rule 16 (stmts)

    stmts               go to state 160
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 158

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare • ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_RPAR  shift, and go to state 161


State 159

   62 stmt_while: KW_WHILE ST_LPAR $@21 expression $@22 ST_RPAR ST_LCURL loop_stmts • ST_RCURL
   63 loop_stmts: loop_stmts • stmts
   65           | loop_stmts • KW_BREAK $@23 ST_DOLLAR
   66           | loop_stmts • KW_CONTINUE ST_DOLLAR

    KW_IF        shift, and go to state 40
    KW_RETURN    shift, and go to state 41
    KW_INT       shift, and go to state 20
    KW_FOR       shift, and go to state 42
    KW_BREAK     shift, and go to state 162
    KW_CHAR      shift, and go to state 21
    KW_WHILE     shift, and go to state 43
    KW_CONTINUE  shift, and go to state 163
    ST_RCURL     shift, and go to state 164
    IDENTIFIER   shift, and go to state 44

    KW_IF        [reduce using rule 16 (stmts)]
    KW_RETURN    [reduce using rule 16 (stmts)]
    KW_INT       [reduce using rule 16 (stmts)]
    KW_FOR       [reduce using rule 16 (stmts)]
    KW_BREAK     [reduce using rule 16 (stmts)]
    KW_CHAR      [reduce using rule 16 (stmts)]
    KW_WHILE     [reduce using rule 16 (stmts)]
    KW_CONTINUE  [reduce using rule 16 (stmts)]
    ST_RCURL     [reduce using rule 16 (stmts)]
    ST_DOLLAR    reduce using rule 16 (stmts)
    ST_DOLLAR    [reduce using rule 24 ($@8)]
    IDENTIFIER   [reduce using rule 16 (stmts)]
    $default     reduce using rule 16 (stmts)

    stmts               go to state 165
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 160

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL stmts • ST_RCURL $@14 elseif

    ST_RCURL  shift, and go to state 166


State 161

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR • ST_LCURL loop_stmts ST_RCURL

    ST_LCURL  shift, and go to state 167


State 162

   65 loop_stmts: loop_stmts KW_BREAK • $@23 ST_DOLLAR

    $default  reduce using rule 64 ($@23)

    $@23  go to state 168


State 163

   66 loop_stmts: loop_stmts KW_CONTINUE • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 169


State 164

   62 stmt_while: KW_WHILE ST_LPAR $@21 expression $@22 ST_RPAR ST_LCURL loop_stmts ST_RCURL •

    $default  reduce using rule 62 (stmt_while)


State 165

   63 loop_stmts: loop_stmts stmts •

    $default  reduce using rule 63 (loop_stmts)


State 166

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL • $@14 elseif

    $default  reduce using rule 45 ($@14)

    $@14  go to state 170


State 167

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL • loop_stmts ST_RCURL

    $default  reduce using rule 67 (loop_stmts)

    loop_stmts  go to state 171


State 168

   65 loop_stmts: loop_stmts KW_BREAK $@23 • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 172


State 169

   66 loop_stmts: loop_stmts KW_CONTINUE ST_DOLLAR •

    $default  reduce using rule 66 (loop_stmts)


State 170

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 • elseif

    KW_ELSE    shift, and go to state 173
    KW_ELSEIF  shift, and go to state 174

    $default  reduce using rule 54 (else)

    elseif  go to state 175
    else    go to state 176


State 171

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts • ST_RCURL
   63 loop_stmts: loop_stmts • stmts
   65           | loop_stmts • KW_BREAK $@23 ST_DOLLAR
   66           | loop_stmts • KW_CONTINUE ST_DOLLAR

    KW_IF        shift, and go to state 40
    KW_RETURN    shift, and go to state 41
    KW_INT       shift, and go to state 20
    KW_FOR       shift, and go to state 42
    KW_BREAK     shift, and go to state 162
    KW_CHAR      shift, and go to state 21
    KW_WHILE     shift, and go to state 43
    KW_CONTINUE  shift, and go to state 163
    ST_RCURL     shift, and go to state 177
    IDENTIFIER   shift, and go to state 44

    KW_IF        [reduce using rule 16 (stmts)]
    KW_RETURN    [reduce using rule 16 (stmts)]
    KW_INT       [reduce using rule 16 (stmts)]
    KW_FOR       [reduce using rule 16 (stmts)]
    KW_BREAK     [reduce using rule 16 (stmts)]
    KW_CHAR      [reduce using rule 16 (stmts)]
    KW_WHILE     [reduce using rule 16 (stmts)]
    KW_CONTINUE  [reduce using rule 16 (stmts)]
    ST_RCURL     [reduce using rule 16 (stmts)]
    ST_DOLLAR    reduce using rule 16 (stmts)
    ST_DOLLAR    [reduce using rule 24 ($@8)]
    IDENTIFIER   [reduce using rule 16 (stmts)]
    $default     reduce using rule 16 (stmts)

    stmts               go to state 165
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 172

   65 loop_stmts: loop_stmts KW_BREAK $@23 ST_DOLLAR •

    $default  reduce using rule 65 (loop_stmts)


State 173

   53 else: KW_ELSE • ST_LCURL $@18 stmts ST_RCURL

    ST_LCURL  shift, and go to state 178


State 174

   50 elseif: KW_ELSEIF • ST_LPAR $@15 expression ST_RPAR $@16 ST_LCURL stmts ST_RCURL $@17 elseif

    ST_LPAR  shift, and go to state 179


State 175

   46 stmt_if: KW_IF $@11 ST_LPAR $@12 expression ST_RPAR $@13 ST_LCURL stmts ST_RCURL $@14 elseif •

    $default  reduce using rule 46 (stmt_if)


State 176

   51 elseif: else •

    $default  reduce using rule 51 (elseif)


State 177

   57 stmt_for: KW_FOR ST_LPAR $@19 stmt_for_assign_declare expression ST_DOLLAR $@20 stmt_for_assign_declare ST_RPAR ST_LCURL loop_stmts ST_RCURL •

    $default  reduce using rule 57 (stmt_for)


State 178

   53 else: KW_ELSE ST_LCURL • $@18 stmts ST_RCURL

    $default  reduce using rule 52 ($@18)

    $@18  go to state 180


State 179

   50 elseif: KW_ELSEIF ST_LPAR • $@15 expression ST_RPAR $@16 ST_LCURL stmts ST_RCURL $@17 elseif

    $default  reduce using rule 47 ($@15)

    $@15  go to state 181


State 180

   53 else: KW_ELSE ST_LCURL $@18 • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    ST_DOLLAR  reduce using rule 24 ($@8)
    $default   reduce using rule 16 (stmts)

    stmts               go to state 182
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 181

   50 elseif: KW_ELSEIF ST_LPAR $@15 • expression ST_RPAR $@16 ST_LCURL stmts ST_RCURL $@17 elseif

    OP_MINUS        shift, and go to state 61
    OP_LOGICAL_NOT  shift, and go to state 62
    ST_LPAR         shift, and go to state 63
    LCHAR           shift, and go to state 64
    UCHAR           shift, and go to state 65
    NCHAR           shift, and go to state 66
    IDENTIFIER      shift, and go to state 67
    NUMBER          shift, and go to state 68

    stmt_call_function  go to state 69
    expression          go to state 183


State 182

   53 else: KW_ELSE ST_LCURL $@18 stmts • ST_RCURL

    ST_RCURL  shift, and go to state 184


State 183

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression • ST_RPAR $@16 ST_LCURL stmts ST_RCURL $@17 elseif
   68 expression: expression • OP_PLUS expression
   69           | expression • OP_MINUS expression
   70           | expression • OP_MULTIPLY expression
   71           | expression • OP_DIVIDE expression
   72           | expression • OP_LESS expression
   73           | expression • OP_LESS_EQUAL expression
   74           | expression • OP_EQUAL expression
   75           | expression • OP_NOT_EQUAL expression
   76           | expression • OP_GREATER expression
   77           | expression • OP_GREATER_EQUAL expression
   78           | expression • OP_LOGICAL_OR expression
   79           | expression • OP_LOGICAL_AND expression
   80           | expression • OP_BITWISE_OR expression
   81           | expression • OP_BITWISE_AND expression
   82           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 86
    OP_MINUS          shift, and go to state 87
    OP_MULTIPLY       shift, and go to state 88
    OP_DIVIDE         shift, and go to state 89
    OP_LESS           shift, and go to state 90
    OP_LESS_EQUAL     shift, and go to state 91
    OP_EQUAL          shift, and go to state 92
    OP_NOT_EQUAL      shift, and go to state 93
    OP_GREATER        shift, and go to state 94
    OP_GREATER_EQUAL  shift, and go to state 95
    OP_BITWISE_OR     shift, and go to state 96
    OP_BITWISE_AND    shift, and go to state 97
    OP_BITWISE_XOR    shift, and go to state 98
    OP_LOGICAL_OR     shift, and go to state 99
    OP_LOGICAL_AND    shift, and go to state 100
    ST_RPAR           shift, and go to state 185


State 184

   53 else: KW_ELSE ST_LCURL $@18 stmts ST_RCURL •

    $default  reduce using rule 53 (else)


State 185

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR • $@16 ST_LCURL stmts ST_RCURL $@17 elseif

    $default  reduce using rule 48 ($@16)

    $@16  go to state 186


State 186

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR $@16 • ST_LCURL stmts ST_RCURL $@17 elseif

    ST_LCURL  shift, and go to state 187


State 187

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR $@16 ST_LCURL • stmts ST_RCURL $@17 elseif

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_FOR      shift, and go to state 42
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 43
    IDENTIFIER  shift, and go to state 44

    ST_DOLLAR  reduce using rule 24 ($@8)
    $default   reduce using rule 16 (stmts)

    stmts               go to state 188
    stmt                go to state 46
    $@8                 go to state 47
    type                go to state 48
    stmt_declare        go to state 49
    stmt_call_function  go to state 50
    stmt_assignment     go to state 51
    stmt_return         go to state 52
    stmt_if             go to state 53
    stmt_for            go to state 54
    stmt_while          go to state 55


State 188

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR $@16 ST_LCURL stmts • ST_RCURL $@17 elseif

    ST_RCURL  shift, and go to state 189


State 189

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR $@16 ST_LCURL stmts ST_RCURL • $@17 elseif

    $default  reduce using rule 49 ($@17)

    $@17  go to state 190


State 190

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR $@16 ST_LCURL stmts ST_RCURL $@17 • elseif

    KW_ELSE    shift, and go to state 173
    KW_ELSEIF  shift, and go to state 174

    $default  reduce using rule 54 (else)

    elseif  go to state 191
    else    go to state 176


State 191

   50 elseif: KW_ELSEIF ST_LPAR $@15 expression ST_RPAR $@16 ST_LCURL stmts ST_RCURL $@17 elseif •

    $default  reduce using rule 50 (elseif)

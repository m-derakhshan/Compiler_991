Terminals unused in grammar

    KW_FOR
    NEW_LINE
    OTHER
    ST_LBR
    ST_RBR
    ST_SEMICOLON


Rules useless in parser due to conflicts

   47 $@12: %empty


State 59 conflicts: 8 reduce/reduce
State 74 conflicts: 6 shift/reduce
State 148 conflicts: 9 shift/reduce


Grammar

    0 $accept: program $end

    1 program: functions main

    2 functions: functions function
    3          | %empty

    4 $@1: %empty

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    6 $@2: %empty

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    8 $@3: %empty

    9 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   10 $@4: %empty

   11 function: KW_VOID IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL stmts ST_RCURL

   12 $@5: %empty

   13 stmts: stmt $@5 stmts
   14      | %empty

   15 stmt: stmt_declare
   16     | stmt_assignment
   17     | stmt_if
   18     | stmt_return
   19     | stmt_while
   20     | stmt_call_function ST_DOLLAR

   21 type: KW_INT
   22     | KW_CHAR

   23 stmt_declare: type IDENTIFIER ids

   24 ids: ST_DOLLAR
   25    | ST_COMMA IDENTIFIER ids
   26    | OP_ASSIGN expression ids

   27 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments ST_RPAR

   28 fun_arguments: fun_args_part1
   29              | %empty

   30 $@6: %empty

   31 fun_args_part1: expression $@6 fun_args_part2

   32 fun_args_part2: ST_COMMA fun_args_part1
   33               | %empty

   34 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR

   35 stmt_return: KW_RETURN expression ST_DOLLAR

   36 stmt_if: matched
   37        | unmatched

   38 $@7: %empty

   39 $@8: %empty

   40 matched: KW_IF ST_LPAR $@7 expression ST_RPAR ST_LCURL stmts ST_RCURL $@8 elseif

   41 $@9: %empty

   42 $@10: %empty

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression ST_RPAR ST_LCURL stmts ST_RCURL $@10 elseif
   44       | else

   45 $@11: %empty

   46 else: KW_ELSE ST_LCURL $@11 stmts ST_RCURL

   47 $@12: %empty

   48 unmatched: KW_IF ST_LPAR $@12 expression ST_RPAR ST_LCURL stmts ST_RCURL

   49 $@13: %empty

   50 stmt_while: KW_WHILE ST_LPAR $@13 expression ST_RPAR ST_LCURL loop_stmts ST_RCURL

   51 loop_stmts: loop_stmts stmts
   52           | loop_stmts KW_BREAK ST_DOLLAR
   53           | loop_stmts KW_CONTINUE ST_DOLLAR
   54           | %empty

   55 expression: expression OP_PLUS expression
   56           | expression OP_MINUS expression
   57           | expression OP_MULTIPLY expression
   58           | expression OP_DIVIDE expression
   59           | expression OP_LESS expression
   60           | expression OP_LESS_EQUAL expression
   61           | expression OP_EQUAL expression
   62           | expression OP_NOT_EQUAL expression
   63           | expression OP_GREATER expression
   64           | expression OP_GREATER_EQUAL expression
   65           | expression OP_LOGICAL_OR expression
   66           | expression OP_LOGICAL_AND expression
   67           | expression OP_BITWISE_OR expression
   68           | expression OP_BITWISE_AND expression
   69           | expression OP_BITWISE_XOR expression
   70           | OP_LOGICAL_NOT expression
   71           | OP_MINUS expression
   72           | ST_LPAR expression ST_RPAR
   73           | IDENTIFIER
   74           | NUMBER
   75           | NCHAR
   76           | UCHAR
   77           | LCHAR
   78           | stmt_call_function

   79 arguments: args_part1
   80          | %empty

   81 $@14: %empty

   82 args_part1: type IDENTIFIER $@14 args_part2

   83 args_part2: ST_COMMA args_part1
   84           | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    KW_VOID (258) 7 11
    KW_IF (259) 40 48
    KW_RETURN (260) 35
    KW_INT (261) 5 9 21
    KW_ELSE (262) 46
    KW_MAIN (263) 5 7
    KW_FOR (264)
    KW_BREAK (265) 52
    KW_CHAR (266) 22
    KW_WHILE (267) 50
    KW_CONTINUE (268) 53
    KW_ELSEIF (269) 43
    NEW_LINE (270)
    OTHER (271)
    OP_ASSIGN (272) 26 34
    OP_PLUS (273) 55
    OP_MINUS (274) 56 71
    OP_MULTIPLY (275) 57
    OP_DIVIDE (276) 58
    OP_LESS (277) 59
    OP_LESS_EQUAL (278) 60
    OP_EQUAL (279) 61
    OP_NOT_EQUAL (280) 62
    OP_GREATER (281) 63
    OP_GREATER_EQUAL (282) 64
    OP_BITWISE_OR (283) 67
    OP_BITWISE_AND (284) 68
    OP_BITWISE_XOR (285) 69
    OP_LOGICAL_OR (286) 65
    OP_LOGICAL_AND (287) 66
    OP_LOGICAL_NOT (288) 70
    ST_LPAR (289) 5 7 9 11 27 40 43 48 50 72
    ST_RPAR (290) 5 7 9 11 27 40 43 48 50 72
    ST_LCURL (291) 5 7 9 11 40 43 46 48 50
    ST_RCURL (292) 5 7 9 11 40 43 46 48 50
    ST_LBR (293)
    ST_RBR (294)
    ST_DOLLAR (295) 20 24 34 35 52 53
    ST_COMMA (296) 25 32 83
    ST_SEMICOLON (297)
    LCHAR <charVal> (298) 77
    UCHAR <charVal> (299) 76
    NCHAR <charVal> (300) 75
    IDENTIFIER <stringVal> (301) 9 11 23 25 27 34 73 82
    NUMBER <intVal> (302) 74


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1
        on right: 0
    functions (50)
        on left: 2 3
        on right: 1 2
    main (51)
        on left: 5 7
        on right: 1
    $@1 (52)
        on left: 4
        on right: 5
    $@2 (53)
        on left: 6
        on right: 7
    function <intVal> (54)
        on left: 9 11
        on right: 2
    $@3 (55)
        on left: 8
        on right: 9
    $@4 (56)
        on left: 10
        on right: 11
    stmts (57)
        on left: 13 14
        on right: 5 7 9 11 13 40 43 46 48 51
    $@5 (58)
        on left: 12
        on right: 13
    stmt (59)
        on left: 15 16 17 18 19 20
        on right: 13
    type (60)
        on left: 21 22
        on right: 23 82
    stmt_declare (61)
        on left: 23
        on right: 15
    ids <intVal> (62)
        on left: 24 25 26
        on right: 23 25 26
    stmt_call_function <intVal> (63)
        on left: 27
        on right: 20 78
    fun_arguments (64)
        on left: 28 29
        on right: 27
    fun_args_part1 (65)
        on left: 31
        on right: 28 32
    $@6 (66)
        on left: 30
        on right: 31
    fun_args_part2 (67)
        on left: 32 33
        on right: 31
    stmt_assignment (68)
        on left: 34
        on right: 16
    stmt_return (69)
        on left: 35
        on right: 18
    stmt_if (70)
        on left: 36 37
        on right: 17
    matched (71)
        on left: 40
        on right: 36
    $@7 (72)
        on left: 38
        on right: 40
    $@8 (73)
        on left: 39
        on right: 40
    elseif (74)
        on left: 43 44
        on right: 40 43
    $@9 (75)
        on left: 41
        on right: 43
    $@10 (76)
        on left: 42
        on right: 43
    else (77)
        on left: 46
        on right: 44
    $@11 (78)
        on left: 45
        on right: 46
    unmatched (79)
        on left: 48
        on right: 37
    $@12 (80)
        on left: 47
        on right: 48
    stmt_while (81)
        on left: 50
        on right: 19
    $@13 (82)
        on left: 49
        on right: 50
    loop_stmts (83)
        on left: 51 52 53 54
        on right: 50 51 52 53
    expression <node> (84)
        on left: 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
        on right: 26 31 34 35 40 43 48 50 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
    arguments (85)
        on left: 79 80
        on right: 5 7 9 11
    args_part1 (86)
        on left: 82
        on right: 79 83
    $@14 (87)
        on left: 81
        on right: 82
    args_part2 (88)
        on left: 83 84
        on right: 82


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (functions)

    program    go to state 1
    functions  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: functions • main
    2 functions: functions • function

    KW_VOID  shift, and go to state 4
    KW_INT   shift, and go to state 5

    main      go to state 6
    function  go to state 7


State 3

    0 $accept: program $end •

    $default  accept


State 4

    7 main: KW_VOID • KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL
   11 function: KW_VOID • IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_MAIN     shift, and go to state 8
    IDENTIFIER  shift, and go to state 9


State 5

    5 main: KW_INT • KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL
    9 function: KW_INT • IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_MAIN     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11


State 6

    1 program: functions main •

    $default  reduce using rule 1 (program)


State 7

    2 functions: functions function •

    $default  reduce using rule 2 (functions)


State 8

    7 main: KW_VOID KW_MAIN • ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 12


State 9

   11 function: KW_VOID IDENTIFIER • ST_LPAR $@4 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 13


State 10

    5 main: KW_INT KW_MAIN • ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 14


State 11

    9 function: KW_INT IDENTIFIER • ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 15


State 12

    7 main: KW_VOID KW_MAIN ST_LPAR • $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 6 ($@2)

    $@2  go to state 16


State 13

   11 function: KW_VOID IDENTIFIER ST_LPAR • $@4 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 10 ($@4)

    $@4  go to state 17


State 14

    5 main: KW_INT KW_MAIN ST_LPAR • $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 4 ($@1)

    $@1  go to state 18


State 15

    9 function: KW_INT IDENTIFIER ST_LPAR • $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL

    $default  reduce using rule 8 ($@3)

    $@3  go to state 19


State 16

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 80 (arguments)

    type        go to state 22
    arguments   go to state 23
    args_part1  go to state 24


State 17

   11 function: KW_VOID IDENTIFIER ST_LPAR $@4 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 80 (arguments)

    type        go to state 22
    arguments   go to state 25
    args_part1  go to state 24


State 18

    5 main: KW_INT KW_MAIN ST_LPAR $@1 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 80 (arguments)

    type        go to state 22
    arguments   go to state 26
    args_part1  go to state 24


State 19

    9 function: KW_INT IDENTIFIER ST_LPAR $@3 • arguments ST_RPAR ST_LCURL stmts ST_RCURL

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    $default  reduce using rule 80 (arguments)

    type        go to state 22
    arguments   go to state 27
    args_part1  go to state 24


State 20

   21 type: KW_INT •

    $default  reduce using rule 21 (type)


State 21

   22 type: KW_CHAR •

    $default  reduce using rule 22 (type)


State 22

   82 args_part1: type • IDENTIFIER $@14 args_part2

    IDENTIFIER  shift, and go to state 28


State 23

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 29


State 24

   79 arguments: args_part1 •

    $default  reduce using rule 79 (arguments)


State 25

   11 function: KW_VOID IDENTIFIER ST_LPAR $@4 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 30


State 26

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 31


State 27

    9 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments • ST_RPAR ST_LCURL stmts ST_RCURL

    ST_RPAR  shift, and go to state 32


State 28

   82 args_part1: type IDENTIFIER • $@14 args_part2

    $default  reduce using rule 81 ($@14)

    $@14  go to state 33


State 29

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 34


State 30

   11 function: KW_VOID IDENTIFIER ST_LPAR $@4 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 35


State 31

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 36


State 32

    9 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 37


State 33

   82 args_part1: type IDENTIFIER $@14 • args_part2

    ST_COMMA  shift, and go to state 38

    $default  reduce using rule 84 (args_part2)

    args_part2  go to state 39


State 34

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 44
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 35

   11 function: KW_VOID IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 55
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 36

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 56
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 37

    9 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 57
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 38

   83 args_part2: ST_COMMA • args_part1

    KW_INT   shift, and go to state 20
    KW_CHAR  shift, and go to state 21

    type        go to state 22
    args_part1  go to state 58


State 39

   82 args_part1: type IDENTIFIER $@14 args_part2 •

    $default  reduce using rule 82 (args_part1)


State 40

   40 matched: KW_IF • ST_LPAR $@7 expression ST_RPAR ST_LCURL stmts ST_RCURL $@8 elseif
   48 unmatched: KW_IF • ST_LPAR $@12 expression ST_RPAR ST_LCURL stmts ST_RCURL

    ST_LPAR  shift, and go to state 59


State 41

   35 stmt_return: KW_RETURN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 69


State 42

   50 stmt_while: KW_WHILE • ST_LPAR $@13 expression ST_RPAR ST_LCURL loop_stmts ST_RCURL

    ST_LPAR  shift, and go to state 70


State 43

   27 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments ST_RPAR
   34 stmt_assignment: IDENTIFIER • OP_ASSIGN expression ST_DOLLAR

    OP_ASSIGN  shift, and go to state 71
    ST_LPAR    shift, and go to state 72


State 44

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 73


State 45

   13 stmts: stmt • $@5 stmts

    $default  reduce using rule 12 ($@5)

    $@5  go to state 74


State 46

   23 stmt_declare: type • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 75


State 47

   15 stmt: stmt_declare •

    $default  reduce using rule 15 (stmt)


State 48

   20 stmt: stmt_call_function • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 76


State 49

   16 stmt: stmt_assignment •

    $default  reduce using rule 16 (stmt)


State 50

   18 stmt: stmt_return •

    $default  reduce using rule 18 (stmt)


State 51

   17 stmt: stmt_if •

    $default  reduce using rule 17 (stmt)


State 52

   36 stmt_if: matched •

    $default  reduce using rule 36 (stmt_if)


State 53

   37 stmt_if: unmatched •

    $default  reduce using rule 37 (stmt_if)


State 54

   19 stmt: stmt_while •

    $default  reduce using rule 19 (stmt)


State 55

   11 function: KW_VOID IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 77


State 56

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 78


State 57

    9 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 79


State 58

   83 args_part2: ST_COMMA args_part1 •

    $default  reduce using rule 83 (args_part2)


State 59

   40 matched: KW_IF ST_LPAR • $@7 expression ST_RPAR ST_LCURL stmts ST_RCURL $@8 elseif
   48 unmatched: KW_IF ST_LPAR • $@12 expression ST_RPAR ST_LCURL stmts ST_RCURL

    OP_MINUS        reduce using rule 38 ($@7)
    OP_MINUS        [reduce using rule 47 ($@12)]
    OP_LOGICAL_NOT  reduce using rule 38 ($@7)
    OP_LOGICAL_NOT  [reduce using rule 47 ($@12)]
    ST_LPAR         reduce using rule 38 ($@7)
    ST_LPAR         [reduce using rule 47 ($@12)]
    LCHAR           reduce using rule 38 ($@7)
    LCHAR           [reduce using rule 47 ($@12)]
    UCHAR           reduce using rule 38 ($@7)
    UCHAR           [reduce using rule 47 ($@12)]
    NCHAR           reduce using rule 38 ($@7)
    NCHAR           [reduce using rule 47 ($@12)]
    IDENTIFIER      reduce using rule 38 ($@7)
    IDENTIFIER      [reduce using rule 47 ($@12)]
    NUMBER          reduce using rule 38 ($@7)
    NUMBER          [reduce using rule 47 ($@12)]
    $default        reduce using rule 38 ($@7)

    $@7   go to state 80
    $@12  go to state 81


State 60

   71 expression: OP_MINUS • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 82


State 61

   70 expression: OP_LOGICAL_NOT • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 83


State 62

   72 expression: ST_LPAR • expression ST_RPAR

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 84


State 63

   77 expression: LCHAR •

    $default  reduce using rule 77 (expression)


State 64

   76 expression: UCHAR •

    $default  reduce using rule 76 (expression)


State 65

   75 expression: NCHAR •

    $default  reduce using rule 75 (expression)


State 66

   27 stmt_call_function: IDENTIFIER • ST_LPAR fun_arguments ST_RPAR
   73 expression: IDENTIFIER •

    ST_LPAR  shift, and go to state 72

    $default  reduce using rule 73 (expression)


State 67

   74 expression: NUMBER •

    $default  reduce using rule 74 (expression)


State 68

   78 expression: stmt_call_function •

    $default  reduce using rule 78 (expression)


State 69

   35 stmt_return: KW_RETURN expression • ST_DOLLAR
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_DOLLAR         shift, and go to state 100


State 70

   50 stmt_while: KW_WHILE ST_LPAR • $@13 expression ST_RPAR ST_LCURL loop_stmts ST_RCURL

    $default  reduce using rule 49 ($@13)

    $@13  go to state 101


State 71

   34 stmt_assignment: IDENTIFIER OP_ASSIGN • expression ST_DOLLAR

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 102


State 72

   27 stmt_call_function: IDENTIFIER ST_LPAR • fun_arguments ST_RPAR

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    $default  reduce using rule 29 (fun_arguments)

    stmt_call_function  go to state 68
    fun_arguments       go to state 103
    fun_args_part1      go to state 104
    expression          go to state 105


State 73

    7 main: KW_VOID KW_MAIN ST_LPAR $@2 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 7 (main)


State 74

   13 stmts: stmt $@5 • stmts

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    KW_IF       [reduce using rule 14 (stmts)]
    KW_RETURN   [reduce using rule 14 (stmts)]
    KW_INT      [reduce using rule 14 (stmts)]
    KW_CHAR     [reduce using rule 14 (stmts)]
    KW_WHILE    [reduce using rule 14 (stmts)]
    IDENTIFIER  [reduce using rule 14 (stmts)]
    $default    reduce using rule 14 (stmts)

    stmts               go to state 106
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 75

   23 stmt_declare: type IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 107
    ST_DOLLAR  shift, and go to state 108
    ST_COMMA   shift, and go to state 109

    ids  go to state 110


State 76

   20 stmt: stmt_call_function ST_DOLLAR •

    $default  reduce using rule 20 (stmt)


State 77

   11 function: KW_VOID IDENTIFIER ST_LPAR $@4 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 11 (function)


State 78

    5 main: KW_INT KW_MAIN ST_LPAR $@1 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 5 (main)


State 79

    9 function: KW_INT IDENTIFIER ST_LPAR $@3 arguments ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 9 (function)


State 80

   40 matched: KW_IF ST_LPAR $@7 • expression ST_RPAR ST_LCURL stmts ST_RCURL $@8 elseif

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 111


State 81

   48 unmatched: KW_IF ST_LPAR $@12 • expression ST_RPAR ST_LCURL stmts ST_RCURL

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 112


State 82

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression
   71           | OP_MINUS expression •

    OP_MULTIPLY  shift, and go to state 87
    OP_DIVIDE    shift, and go to state 88

    $default  reduce using rule 71 (expression)


State 83

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression
   70           | OP_LOGICAL_NOT expression •

    $default  reduce using rule 70 (expression)


State 84

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression
   72           | ST_LPAR expression • ST_RPAR

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_RPAR           shift, and go to state 113


State 85

   55 expression: expression OP_PLUS • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 114


State 86

   56 expression: expression OP_MINUS • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 115


State 87

   57 expression: expression OP_MULTIPLY • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 116


State 88

   58 expression: expression OP_DIVIDE • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 117


State 89

   59 expression: expression OP_LESS • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 118


State 90

   60 expression: expression OP_LESS_EQUAL • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 119


State 91

   61 expression: expression OP_EQUAL • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 120


State 92

   62 expression: expression OP_NOT_EQUAL • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 121


State 93

   63 expression: expression OP_GREATER • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 122


State 94

   64 expression: expression OP_GREATER_EQUAL • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 123


State 95

   67 expression: expression OP_BITWISE_OR • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 124


State 96

   68 expression: expression OP_BITWISE_AND • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 125


State 97

   69 expression: expression OP_BITWISE_XOR • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 126


State 98

   65 expression: expression OP_LOGICAL_OR • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 127


State 99

   66 expression: expression OP_LOGICAL_AND • expression

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 128


State 100

   35 stmt_return: KW_RETURN expression ST_DOLLAR •

    $default  reduce using rule 35 (stmt_return)


State 101

   50 stmt_while: KW_WHILE ST_LPAR $@13 • expression ST_RPAR ST_LCURL loop_stmts ST_RCURL

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 129


State 102

   34 stmt_assignment: IDENTIFIER OP_ASSIGN expression • ST_DOLLAR
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_DOLLAR         shift, and go to state 130


State 103

   27 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments • ST_RPAR

    ST_RPAR  shift, and go to state 131


State 104

   28 fun_arguments: fun_args_part1 •

    $default  reduce using rule 28 (fun_arguments)


State 105

   31 fun_args_part1: expression • $@6 fun_args_part2
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99

    $default  reduce using rule 30 ($@6)

    $@6  go to state 132


State 106

   13 stmts: stmt $@5 stmts •

    $default  reduce using rule 13 (stmts)


State 107

   26 ids: OP_ASSIGN • expression ids

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 133


State 108

   24 ids: ST_DOLLAR •

    $default  reduce using rule 24 (ids)


State 109

   25 ids: ST_COMMA • IDENTIFIER ids

    IDENTIFIER  shift, and go to state 134


State 110

   23 stmt_declare: type IDENTIFIER ids •

    $default  reduce using rule 23 (stmt_declare)


State 111

   40 matched: KW_IF ST_LPAR $@7 expression • ST_RPAR ST_LCURL stmts ST_RCURL $@8 elseif
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_RPAR           shift, and go to state 135


State 112

   48 unmatched: KW_IF ST_LPAR $@12 expression • ST_RPAR ST_LCURL stmts ST_RCURL
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_RPAR           shift, and go to state 136


State 113

   72 expression: ST_LPAR expression ST_RPAR •

    $default  reduce using rule 72 (expression)


State 114

   55 expression: expression • OP_PLUS expression
   55           | expression OP_PLUS expression •
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 87
    OP_DIVIDE    shift, and go to state 88

    $default  reduce using rule 55 (expression)


State 115

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   56           | expression OP_MINUS expression •
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_MULTIPLY  shift, and go to state 87
    OP_DIVIDE    shift, and go to state 88

    $default  reduce using rule 56 (expression)


State 116

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   57           | expression OP_MULTIPLY expression •
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 57 (expression)


State 117

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   58           | expression OP_DIVIDE expression •
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    $default  reduce using rule 58 (expression)


State 118

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   59           | expression OP_LESS expression •
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 85
    OP_MINUS     shift, and go to state 86
    OP_MULTIPLY  shift, and go to state 87
    OP_DIVIDE    shift, and go to state 88

    $default  reduce using rule 59 (expression)


State 119

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   60           | expression OP_LESS_EQUAL expression •
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS      shift, and go to state 85
    OP_MINUS     shift, and go to state 86
    OP_MULTIPLY  shift, and go to state 87
    OP_DIVIDE    shift, and go to state 88

    $default  reduce using rule 60 (expression)


State 120

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   61           | expression OP_EQUAL expression •
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94

    $default  reduce using rule 61 (expression)


State 121

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   62           | expression OP_NOT_EQUAL expression •
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94

    $default  reduce using rule 62 (expression)


State 122

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   63           | expression OP_GREATER expression •
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 85
    OP_MINUS       shift, and go to state 86
    OP_MULTIPLY    shift, and go to state 87
    OP_DIVIDE      shift, and go to state 88
    OP_LESS        shift, and go to state 89
    OP_LESS_EQUAL  shift, and go to state 90

    $default  reduce using rule 63 (expression)


State 123

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   64           | expression OP_GREATER_EQUAL expression •
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS        shift, and go to state 85
    OP_MINUS       shift, and go to state 86
    OP_MULTIPLY    shift, and go to state 87
    OP_DIVIDE      shift, and go to state 88
    OP_LESS        shift, and go to state 89
    OP_LESS_EQUAL  shift, and go to state 90

    $default  reduce using rule 64 (expression)


State 124

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   67           | expression OP_BITWISE_OR expression •
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94

    $default  reduce using rule 67 (expression)


State 125

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   68           | expression OP_BITWISE_AND expression •
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94

    $default  reduce using rule 68 (expression)


State 126

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression
   69           | expression OP_BITWISE_XOR expression •

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94

    $default  reduce using rule 69 (expression)


State 127

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   65           | expression OP_LOGICAL_OR expression •
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97

    $default  reduce using rule 65 (expression)


State 128

   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   66           | expression OP_LOGICAL_AND expression •
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97

    $default  reduce using rule 66 (expression)


State 129

   50 stmt_while: KW_WHILE ST_LPAR $@13 expression • ST_RPAR ST_LCURL loop_stmts ST_RCURL
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_RPAR           shift, and go to state 137


State 130

   34 stmt_assignment: IDENTIFIER OP_ASSIGN expression ST_DOLLAR •

    $default  reduce using rule 34 (stmt_assignment)


State 131

   27 stmt_call_function: IDENTIFIER ST_LPAR fun_arguments ST_RPAR •

    $default  reduce using rule 27 (stmt_call_function)


State 132

   31 fun_args_part1: expression $@6 • fun_args_part2

    ST_COMMA  shift, and go to state 138

    $default  reduce using rule 33 (fun_args_part2)

    fun_args_part2  go to state 139


State 133

   26 ids: OP_ASSIGN expression • ids
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_ASSIGN         shift, and go to state 107
    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_DOLLAR         shift, and go to state 108
    ST_COMMA          shift, and go to state 109

    ids  go to state 140


State 134

   25 ids: ST_COMMA IDENTIFIER • ids

    OP_ASSIGN  shift, and go to state 107
    ST_DOLLAR  shift, and go to state 108
    ST_COMMA   shift, and go to state 109

    ids  go to state 141


State 135

   40 matched: KW_IF ST_LPAR $@7 expression ST_RPAR • ST_LCURL stmts ST_RCURL $@8 elseif

    ST_LCURL  shift, and go to state 142


State 136

   48 unmatched: KW_IF ST_LPAR $@12 expression ST_RPAR • ST_LCURL stmts ST_RCURL

    ST_LCURL  shift, and go to state 143


State 137

   50 stmt_while: KW_WHILE ST_LPAR $@13 expression ST_RPAR • ST_LCURL loop_stmts ST_RCURL

    ST_LCURL  shift, and go to state 144


State 138

   32 fun_args_part2: ST_COMMA • fun_args_part1

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    fun_args_part1      go to state 145
    expression          go to state 105


State 139

   31 fun_args_part1: expression $@6 fun_args_part2 •

    $default  reduce using rule 31 (fun_args_part1)


State 140

   26 ids: OP_ASSIGN expression ids •

    $default  reduce using rule 26 (ids)


State 141

   25 ids: ST_COMMA IDENTIFIER ids •

    $default  reduce using rule 25 (ids)


State 142

   40 matched: KW_IF ST_LPAR $@7 expression ST_RPAR ST_LCURL • stmts ST_RCURL $@8 elseif

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 146
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 143

   48 unmatched: KW_IF ST_LPAR $@12 expression ST_RPAR ST_LCURL • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 147
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 144

   50 stmt_while: KW_WHILE ST_LPAR $@13 expression ST_RPAR ST_LCURL • loop_stmts ST_RCURL

    $default  reduce using rule 54 (loop_stmts)

    loop_stmts  go to state 148


State 145

   32 fun_args_part2: ST_COMMA fun_args_part1 •

    $default  reduce using rule 32 (fun_args_part2)


State 146

   40 matched: KW_IF ST_LPAR $@7 expression ST_RPAR ST_LCURL stmts • ST_RCURL $@8 elseif

    ST_RCURL  shift, and go to state 149


State 147

   48 unmatched: KW_IF ST_LPAR $@12 expression ST_RPAR ST_LCURL stmts • ST_RCURL

    ST_RCURL  shift, and go to state 150


State 148

   50 stmt_while: KW_WHILE ST_LPAR $@13 expression ST_RPAR ST_LCURL loop_stmts • ST_RCURL
   51 loop_stmts: loop_stmts • stmts
   52           | loop_stmts • KW_BREAK ST_DOLLAR
   53           | loop_stmts • KW_CONTINUE ST_DOLLAR

    KW_IF        shift, and go to state 40
    KW_RETURN    shift, and go to state 41
    KW_INT       shift, and go to state 20
    KW_BREAK     shift, and go to state 151
    KW_CHAR      shift, and go to state 21
    KW_WHILE     shift, and go to state 42
    KW_CONTINUE  shift, and go to state 152
    ST_RCURL     shift, and go to state 153
    IDENTIFIER   shift, and go to state 43

    KW_IF        [reduce using rule 14 (stmts)]
    KW_RETURN    [reduce using rule 14 (stmts)]
    KW_INT       [reduce using rule 14 (stmts)]
    KW_BREAK     [reduce using rule 14 (stmts)]
    KW_CHAR      [reduce using rule 14 (stmts)]
    KW_WHILE     [reduce using rule 14 (stmts)]
    KW_CONTINUE  [reduce using rule 14 (stmts)]
    ST_RCURL     [reduce using rule 14 (stmts)]
    IDENTIFIER   [reduce using rule 14 (stmts)]

    stmts               go to state 154
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 149

   40 matched: KW_IF ST_LPAR $@7 expression ST_RPAR ST_LCURL stmts ST_RCURL • $@8 elseif

    $default  reduce using rule 39 ($@8)

    $@8  go to state 155


State 150

   48 unmatched: KW_IF ST_LPAR $@12 expression ST_RPAR ST_LCURL stmts ST_RCURL •

    $default  reduce using rule 48 (unmatched)


State 151

   52 loop_stmts: loop_stmts KW_BREAK • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 156


State 152

   53 loop_stmts: loop_stmts KW_CONTINUE • ST_DOLLAR

    ST_DOLLAR  shift, and go to state 157


State 153

   50 stmt_while: KW_WHILE ST_LPAR $@13 expression ST_RPAR ST_LCURL loop_stmts ST_RCURL •

    $default  reduce using rule 50 (stmt_while)


State 154

   51 loop_stmts: loop_stmts stmts •

    $default  reduce using rule 51 (loop_stmts)


State 155

   40 matched: KW_IF ST_LPAR $@7 expression ST_RPAR ST_LCURL stmts ST_RCURL $@8 • elseif

    KW_ELSE    shift, and go to state 158
    KW_ELSEIF  shift, and go to state 159

    elseif  go to state 160
    else    go to state 161


State 156

   52 loop_stmts: loop_stmts KW_BREAK ST_DOLLAR •

    $default  reduce using rule 52 (loop_stmts)


State 157

   53 loop_stmts: loop_stmts KW_CONTINUE ST_DOLLAR •

    $default  reduce using rule 53 (loop_stmts)


State 158

   46 else: KW_ELSE • ST_LCURL $@11 stmts ST_RCURL

    ST_LCURL  shift, and go to state 162


State 159

   43 elseif: KW_ELSEIF • ST_LPAR $@9 expression ST_RPAR ST_LCURL stmts ST_RCURL $@10 elseif

    ST_LPAR  shift, and go to state 163


State 160

   40 matched: KW_IF ST_LPAR $@7 expression ST_RPAR ST_LCURL stmts ST_RCURL $@8 elseif •

    $default  reduce using rule 40 (matched)


State 161

   44 elseif: else •

    $default  reduce using rule 44 (elseif)


State 162

   46 else: KW_ELSE ST_LCURL • $@11 stmts ST_RCURL

    $default  reduce using rule 45 ($@11)

    $@11  go to state 164


State 163

   43 elseif: KW_ELSEIF ST_LPAR • $@9 expression ST_RPAR ST_LCURL stmts ST_RCURL $@10 elseif

    $default  reduce using rule 41 ($@9)

    $@9  go to state 165


State 164

   46 else: KW_ELSE ST_LCURL $@11 • stmts ST_RCURL

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 166
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 165

   43 elseif: KW_ELSEIF ST_LPAR $@9 • expression ST_RPAR ST_LCURL stmts ST_RCURL $@10 elseif

    OP_MINUS        shift, and go to state 60
    OP_LOGICAL_NOT  shift, and go to state 61
    ST_LPAR         shift, and go to state 62
    LCHAR           shift, and go to state 63
    UCHAR           shift, and go to state 64
    NCHAR           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    NUMBER          shift, and go to state 67

    stmt_call_function  go to state 68
    expression          go to state 167


State 166

   46 else: KW_ELSE ST_LCURL $@11 stmts • ST_RCURL

    ST_RCURL  shift, and go to state 168


State 167

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression • ST_RPAR ST_LCURL stmts ST_RCURL $@10 elseif
   55 expression: expression • OP_PLUS expression
   56           | expression • OP_MINUS expression
   57           | expression • OP_MULTIPLY expression
   58           | expression • OP_DIVIDE expression
   59           | expression • OP_LESS expression
   60           | expression • OP_LESS_EQUAL expression
   61           | expression • OP_EQUAL expression
   62           | expression • OP_NOT_EQUAL expression
   63           | expression • OP_GREATER expression
   64           | expression • OP_GREATER_EQUAL expression
   65           | expression • OP_LOGICAL_OR expression
   66           | expression • OP_LOGICAL_AND expression
   67           | expression • OP_BITWISE_OR expression
   68           | expression • OP_BITWISE_AND expression
   69           | expression • OP_BITWISE_XOR expression

    OP_PLUS           shift, and go to state 85
    OP_MINUS          shift, and go to state 86
    OP_MULTIPLY       shift, and go to state 87
    OP_DIVIDE         shift, and go to state 88
    OP_LESS           shift, and go to state 89
    OP_LESS_EQUAL     shift, and go to state 90
    OP_EQUAL          shift, and go to state 91
    OP_NOT_EQUAL      shift, and go to state 92
    OP_GREATER        shift, and go to state 93
    OP_GREATER_EQUAL  shift, and go to state 94
    OP_BITWISE_OR     shift, and go to state 95
    OP_BITWISE_AND    shift, and go to state 96
    OP_BITWISE_XOR    shift, and go to state 97
    OP_LOGICAL_OR     shift, and go to state 98
    OP_LOGICAL_AND    shift, and go to state 99
    ST_RPAR           shift, and go to state 169


State 168

   46 else: KW_ELSE ST_LCURL $@11 stmts ST_RCURL •

    $default  reduce using rule 46 (else)


State 169

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression ST_RPAR • ST_LCURL stmts ST_RCURL $@10 elseif

    ST_LCURL  shift, and go to state 170


State 170

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression ST_RPAR ST_LCURL • stmts ST_RCURL $@10 elseif

    KW_IF       shift, and go to state 40
    KW_RETURN   shift, and go to state 41
    KW_INT      shift, and go to state 20
    KW_CHAR     shift, and go to state 21
    KW_WHILE    shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 14 (stmts)

    stmts               go to state 171
    stmt                go to state 45
    type                go to state 46
    stmt_declare        go to state 47
    stmt_call_function  go to state 48
    stmt_assignment     go to state 49
    stmt_return         go to state 50
    stmt_if             go to state 51
    matched             go to state 52
    unmatched           go to state 53
    stmt_while          go to state 54


State 171

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression ST_RPAR ST_LCURL stmts • ST_RCURL $@10 elseif

    ST_RCURL  shift, and go to state 172


State 172

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression ST_RPAR ST_LCURL stmts ST_RCURL • $@10 elseif

    $default  reduce using rule 42 ($@10)

    $@10  go to state 173


State 173

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression ST_RPAR ST_LCURL stmts ST_RCURL $@10 • elseif

    KW_ELSE    shift, and go to state 158
    KW_ELSEIF  shift, and go to state 159

    elseif  go to state 174
    else    go to state 161


State 174

   43 elseif: KW_ELSEIF ST_LPAR $@9 expression ST_RPAR ST_LCURL stmts ST_RCURL $@10 elseif •

    $default  reduce using rule 43 (elseif)
